/*
 * Copyright (c) 2011-2023 Technosoftware GmbH. All rights reserved
 * Web: https://technosoftware.com 
 * 
 * The source code in this file is covered under a dual-license scenario:
 *   - Owner of a purchased license: SCLA 1.0
 *   - GPL V3: everybody else
 *
 * SCLA license terms accompanied with this source code.
 * See https://technosoftware.com/license/Source_Code_License_Agreement.pdf
 *
 * GNU General Public License as published by the Free Software Foundation;
 * version 3 of the License are accompanied with this source code.
 * See https://technosoftware.com/license/GPLv3License.txt
 *
 * This source code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 */

/*! \page serverdevelopment Server Development

\addindex serverdevelopment
\tableofcontents

<p>With the OPC DA/AE Server Solution C++ the OPC Data Access and Alarms&Events Server development is reduced to the development within one C++ file with configuration definitions and device access methods. The OPC specification handling for OPC DA 2.05a, 3.00 00 and OPC AE 1.00, 1.10 is done in the generic source code part.<br/>
The customization is developed with Visual Studio using C++.<br/>
The sample applications are provided with projects for several Visual Studio versions but can easily be converted to be used with newer versions of Visual Studio.<br/>

<h2>New Project</h2>
<p>A new server development project can be based on one of the sample applications:<br/>
The sample projects are for Visual Studio.<br/>
Copy the best fitted sample application into a new directory and make the following changes:
<ul>
	<li>Open the copied project in Visual Studio and optionally change the solution and project name</li>
	<li>Open the file ClassicNodeManager.cpp and change the server registration definitions in the method OnGetDaServerDefinition and OnGetAeServerDefinition in case of a combined OPC DA/AE server.</li>
	<li>Unique GUIDs for the CLSID and APPID can be generate with the Visual Studio tool Create GUIDS</li>
	<li>Open the Visual Studio project properties, select Project - Properties - Debug - Start Action and change the Start External program application path to OpcDaAeServer.exe  in the project debug output directory</li>
	<li>Compile the project. The copied sample application now runs under a new ProgID.</li>
	<li>Make the functional program changes</li>
</ul>
</p>

\section dataaccess_1 Data Access
The server manages the OPC DA 2.05a/3.00 client interface and the internal data cache.
\image html DaServerCustomization.png
The customization part handles the device interface. The 'device' doesn't need to be a hardware component, it can also be a database or another software application.<br/>
A set of customization interface methods handles: 
<ul>
	<li>configuration</li>
	<li>the data exchange</li>
	<li>item update coordination</li>
</ul>
between the generic and the customization part.<br/>
The client update thread in the generic server part updates the connected clients from the cache according the client's update requests.<br/>
The customization part calls the generic server to update item values. This event driven mode ensure the best performance. But it is also possible to use the generic server refresh thread which calls the customization to update the generic server cache.<br/>
The write to the device is handled only when a client executes a write function. There is no periodic refresh of output items.

\subsection dataaccess_1_1 Customization
The OPC DA/AE Server Solution C++ customization is a located in the ClassicNodeManager.cpp with a set of methods that are called from the generic server and a set of generic server callback methods.
\image html Customization.png
The generic server calls some methods at startup: 
<ol>
	<li>OnGetLogLevel()</li>
	<li>OnGetLogPath()</li>
	<li>OnStartupSignal()</li>
	<li>OnGetDaServerParameters()</li>
	<li>OnGetDaOptimizationParameters()</li>
	<li>OnGetDaServerDefinition()</li>
	<li>OnGetAeServerDefinition() if AE option is used</li>
	<li>OnCreateServerItems()</li>
</ol>
and some when a client calls certain functions: 
<ol>
	<li>OnRefreshItems()</li>
	<li>OnWriteItems()</li>
</ol>
Callback functions allow the customization to get status information from the generic server or change data in the generic server. The most important callback methods are: 
<ol>
	<li>AddItem()</li>
	<li>SetItemValue()</li>
</ol>
Additional functions can be called by the generic server: 
<ol>
	<li>Dynamic Address Space handling
		<ul>
			<li>OnRequestItems()</li>
		</ul>
	<li>Custom specific browse handling 
		<ul>
			<li>OnBrowseChangePosition()</li>
			<li>OnBrowseItemIds()</li>
			<li>OnBrowseGetFullItemId()</li>
		</ul>
	</li>
	<li>Custom Property handling 
		<ul>
			<li>OnQueryProperties()</li>
			<li>OnGetPropertyValue()</li>
		</ul>
	</li>
	<li>Item Update Optimizations 
		<ul>
			<li>OnAddItem()</li>
			<li>OnRemoveItem()</li>
		</ul>
	</li>
</ol>
Additional callback functions can be used: 
<ol>
	<li>AddProperty allows adding of custom properties to the generic server</li>
	<li>AddAnalogItem allows adding an analog item to the generic server cache</li>
	<li>RemoveItem allows removing an item from the generic server cache</li>
	<li>GetActiveItems gets a list of items used at least by one client</li>
</ol>

\subsection dataaccess_1_2 Optimizations
The OPC DA/AE Server Solution C++ allows the usage of several optimization methods depending on the server requirements. Some of the optimization methods are called from the customization part like GetActiveItems but others are called from the generic server. The optimization methods called by the generic server can be turned on or off during server startup phase by setting the parameters of the OnGetDaOptimizationParameters method. <br/>
To get an impression of the usage of these optimization methods they are explained in more detail below: 
<table cellspacing="0" width="100%">
  <tr>
    <td valign="top" align="left" width="15%">GetActiveItems()</td>
    <td valign="top" align="left" width="75%">For servers with a slow update rate, e.g. because of a slow communication to the underlying device, it can be helpful that only items gets updated which are in fact used by at least one client. With the GetActiveItems method the customization part can get a list of currently active items from the generic server.<br/>
		This method is useful if the customization part has a slow update rate and thus GetActiveItems is not called very often. This reduce the number of calls from the customization part to the generic server part.
	</td>
  </tr>
  <tr>
    <td valign="top" width="15%">OnRequestItems()</td>
    <td valign="top" width="96%">If a client accesses items that do not yet exist in the server's cache OnRequestItems is called. If you didn't use the dynamic address space handling it is useful to disable the call of OnRequestItems by the generic server to reduce the number of calls from the generic server to the customization part. If the customization part doesn't implement OnRequestItems you can disable the use of OnRequestItems with the OnGetDaOptimizationParameters method. </td>
  </tr>
  <tr>
    <td valign="top" width="15%">OnRefreshItems()</td>
    <td valign="top" width="75%">If a client calls a read from device OnRefreshItems is called. For customizations which gets notified by the underlying device of new values it sometimes can be assumed that the internal cache of the server is always current and therefore no device access is required. In such a case it is useful to disable the call of OnRefreshItems by the generic server to reduce the number of calls from the generic server to the customization part. If the customization part doesn't implement OnRefreshItems you can disable the use of OnRefreshItems with the OnGetDaOptimizationParameters method. </td>
  </tr>
  <tr>
    <td valign="top" width="15%">OnAddItem() / OnRemoveItem()</td>
    <td valign="top" width="75%">For servers with a high update rate or a large amount of items the use of the GetActiveItems method isn't very useful becuase of the number of calls and the large array returned by this method.<br/>
		Another option is to use OnAddItem() / OnRemoveItem() which also allows the optimization of the item update within the customization part to only those items which are used by at least one client. If an item is added to a group or used within an item based read/write method for the first time the generic server part calls OnAddItems for that items and if an item is removed from a group and is no longer used elsewhere the generic server part calls OnRemoveItems for that items.<br/>
		This always updates the customization part to enable/disable the item update for specific items. There is no need for the customization part to call GetActiveItems during refresh because it already gets informed by OnAddItems / OnRemoveItems and can create a always current list of active items. On the downside this means that the generic server can call many times OnAddItems / OnRemoveItems depending on the clients behavior.<br/>
		The use of OnAddItem() / OnRemoveItem() can be enabled/disabled with the OnGetDaOptimizationParameters method. 
	</td>
  </tr>
</table>

\subsection dataaccess_1_3 Refresh Handling
The item refresh from device to client consists of two parts: 
<table cellspacing="0" width="100%">
  <tr>
    <td valign="top" align="left" width="15%">Refresh the server cache from the device</td>
    <td valign="top" align="left" width="75%">Value changes can be event driven from the device or polled by a thread in the customization plug-in. The cache refresh is handled in the customization module and has to be implemented in a suitable way. 
		<ul>
			<li>The standard implementation uses only the SetItemValue callback method to write new values to the cache whenever they get available. The device may be polled and handled event driven.</li>
			<li>The generic server calls the customization method OnRefreshItems when an OPC client executes a read from device. If possible the current value should be read from the device and the cache updated with the SetItemValue callback method.</li>
		</ul>
	</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Update the clients</td>
    <td valign="top" width="96%">The update of the connected clients is handled in the generic server according the OPC specifications.</td>
  </tr>
</table>

The device update from client to device is handled as follows: 
<table cellspacing="0" width="100%">
  <tr>
    <td valign="top" align="left" width="15%">Update temporary buffer or device</td>
    <td valign="top" align="left" width="75%">The update of the temporary buffer or the device is handled in the customization module and has to be implemented in a suitable way.<br/>
		The generic server calls the customization method OnWriteItems when an OPC client executes a write to device and once at startup.
	</td>
  </tr>
</table>

\subsection dataaccess_1_4 Data Access Threads
The generic server uses the free threaded model. This prevents one client to block another client but requires all parts of the server to be programmed in a thread safe way. This is the case for the generic part of the server but the user has to be careful to also keep the application specific server code thread safe. 

<h3>Update Thread per Client</h3>
This thread is created when a client connects to the server and exists until the client disconnects. The thread waits on an event and then checks all defined groups for pending asynchronous callbacks. The groups may have different refresh intervals but they are a multiple of the activation interval. 

<h3>Asynchronous read/write handling threads</h3>
Each asynchronous read or write server call creates a thread that handles the I/O operation and asynchronous callback. The thread terminates after handling a single read/write request. The client may call another asynchronous read/write function before the previous calls are finished. He has however to be careful not to have too many calls outstanding. Otherwise the system resources may get exhausted.

\section alarmsevents_2 Alarms&Events
The generic server manages the OPC DA 2.05a/3.00 and AE 1.00/AE 1.10 client interface and the internal data cache.
\image html AEServerCustomization.png
The customization part handles the device interface. The 'device' doesn't need to be a hardware component, it can also be a database or another software application.<br/>
A set of customization interface methods handles: 
<ul>
	<li>configuration</li>
	<li>the data exchange</li>
	<li>item update coordination</li>
</ul>
between the generic and the customization part.<br/>
The client update thread in the generic server part updates the connected clients from the cache according the client's update requests.<br/>
The customization part calls the generic server to update item values. This event driven mode ensure the best performance. But it is also possible to use the generic server refresh thread which calls the customization to update the generic server cache.<br/>
The write to the device is handled only when a client executes a write function. There is no periodic refresh of output items.<br/>
In addition the customization part can setup an Alarms&Events Server. For this there are two major groups of functions provided by the generic server part which can be called from the customization part: 
<ul>
	<li>Functions to define the Event and Process Area Space.</li>
	<li>Functions to report changes of the Condition states and to fire Simple and Tracking Events.</li>
</ul>

\section debugging_3 Debugging
A new OPC DA/AE Server Solution C++ customization can easily be debugged by starting the application in debug mode and then connect with a client.<br/>
Since the OPC DA/AE Server Solution C++ includes full source code it is easy to debug your application.<br/>
To set up a project for debugging the following needs to be done: <br/>
<ul>
	<li>Compile the server in debug mode</li>
	<li>Register this server project by executing RegServer.bat in the bin\\debug directory.</lI>
</ul> 
Start the application in debug mode.<br/> 
The generic server is initialized and calls the plug-in methods 
<ol>
	<li>OnGetDaServerDefinition()</li>
	<li>OnGetDaServerParameters()</li>
	<li>OnCreateServerItems()</li>
</ol> 
Then the server is idle until a client connects.<br/>
Connect to the server with an OPC 2.05a or 3.00 client. You need to connect to the server ProgID defined in the OnGetDaServerDefinition() method. <br/>
Further calls depend on the server configuration mode and the client. In a server with static item address space the generic server calls the plug-in when a client executes: 
<ul>
	<li>a read from device (OnRefreshItems())</li>
	<li>a write (OnWriteItems())</li>
	<li>accesses custom item properties (OnQueryProperties(), OnGetPropertyValue())</li>
</ul> 
In a server with dynamic item address space the browse functions are forwarded to the plug-in. Often the browse functions are the first functions called by a client.

\htmlonly
  Go to the <a href="deployment.html">next</a> section or return to the <a href="index.html">index</a>.
\endhtmlonly
  
  */ 