/*
 * Copyright (c) 2011-2022 Technosoftware GmbH. All rights reserved
 * Web: https://technosoftware.com 
 * 
 * The source code in this file is covered under a dual-license scenario:
 *   - Owner of a purchased license: SCLA 1.0
 *   - GPL V3: everybody else
 *
 * SCLA license terms accompanied with this source code.
 * See https://technosoftware.com/license/Source_Code_License_Agreement.pdf
 *
 * GNU General Public License as published by the Free Software Foundation;
 * version 3 of the License are accompanied with this source code.
 * See https://technosoftware.com/license/GPLv3License.txt
 *
 * This source code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifndef __GENERICGROUP_H_
#define __GENERICGROUP_H_

//DOM-IGNORE-BEGIN

#include "DaComBaseServer.h"
#include "DaAsynchronousThread.h"  
#include "DaItem.h"

#include "DaGenericServer.h"
#include "DaBaseServer.h"


 
class DaGenericServer;
class DaBaseServer;
class DaItem;
class DaDeviceItem;




#define STREAM_DATA_CONNECTION (1)
#define STREAM_DATATIME_CONNECTION (2)
#define STREAM_WRITE_CONNECTION (3)

//#define STREAM_DATA_CONNECTION_DISP (17)
#define STREAM_DATATIME_CONNECTION_DISP (18)
#define STREAM_WRITE_CONNECTION_DISP (19)


class DaGenericGroup
{
public:
      // constructor
   DaGenericGroup( void );

      // Initializer
   HRESULT Create(
         DaGenericServer   *pServer,
         LPCWSTR           Name,
         BOOL              bActive,
         long             *pTimeBias,
         long              dwRequestedUpdateRate,
         long              hClientGroupHandle,
         float            *pPercentDeadband,
         long              dwLCID,
         BOOL              bPublicGroup,
         long              hPublicGroupHandle,
         long             *phServerGroupHandle
      );

      // clone constructor:
      // generates a private group from another (private or public) group
   HRESULT Create(
         DaGenericGroup    *pCloned,
         LPCWSTR           NewName,
         long             *phServerGroupHandle
      );

   ~DaGenericGroup();

//====================== Member Variables  =============================

private:
               // tells whether group was created yet or not
               // ( if FALSE Create method was not called or failed! )
   BOOL m_Created;

               // used to by the server instance to "nail" the group
               // so that this instance cannot be deleted while threads are running 
               // and accessing it
   long m_RefCount;

               // when a group has to be deleted set this bit TRUE
   BOOL m_ToKill;

               // tells whether group is active or not,
               // inactive => all callbacks stopped and reads return BAD/Out of service.
               // Use public function members GetActiveState() / SetActiveState().
   BOOL m_Active;

public:
               // each group (private or public) belongs to a server instance
               // if the server object is unloaded
   DaGenericServer       *m_pServer;

   DaBaseServer  *m_pServerHandler;


public:

               // assigned by the generic part
   long  m_hServerGroupHandle;

               // in minutes
   long  m_TimeBias;

               // the update rate at which the server
               // can refresh the group data 
               // in msec
   long  m_RevisedUpdateRate;

               // the update rate at which the client
               // would like the group updated
   long  m_RequestedUpdateRate;

               // Handle for this group provided by the
               // client and used during refresh or read
               // of group within callback functions to
               // identify the group
   long  m_hClientGroupHandle;

               // Notification change amount for analog signals  ( EUtype analog ) 
   float m_PercentDeadband;
   

               // Locale ID
   long  m_dwLCID;
   
               // Tells whether IOPCDataCallback::OnDataChange callbacks are
               // disabled or enabled.
   BOOL  m_fCallbackEnable;

public:
               // must be unique among Public Groups of server instance 
               // if this group is public and among Private Groups if this 
               // group is private;
               // (if an empty string is passed a unique name
               //  is generated by the server for the group)
               // must be accessed within daGenericServer_->GroupsCritSec
               
   LPWSTR  m_Name;

               // here is the list of items belonging to the
               // group. It is an open array of pointers
               // where the index is the Server Handle for the
               // item (this allows faster access for the functions
               // using it). Because of the fact that Server Handles 
               // cannot be recycled once an item is removed from 
               // the group the pointer is set to NULL. The OpenArray
               // class has a method which returs the size (the highest
               // set value of the array; this attribute is used to 
               // add new items
   OpenArray<DaGenericItem*> m_oaItems;

               // list of COM Items, that is items created through
               // the "Dispatch"-AddItems function.
               // It's the counterpart of oaItems. 
               // Because adding of items is allowed through both 
               // the Custom and the automation interface, COMItems
               // are created only if necessary, if needed by some
               // automation interface to the group. In case of an
               // Enumeration they should be created on the fly...
               // If oaItems lists the items in the group,
               // oaCOMItems lists the items in the group actually
               // handled by some automation client.
               // This list is fully handled in the generic part 
               // of the server **/
   OpenArray<DaItem*> m_oaCOMItems;

               // critical section used to access 
               // arrays of COM and generic items!
   CRITICAL_SECTION m_ItemsCritSec;

private:

               // tells whether this is the client view 
               // of a public or a private group
   BOOL m_bPublicGroup;

               // used only if public:
               // index of the DaPublicGroup in the DaPublicGroupManager,
               // it is used to check whether the group has been
               // removed or not
   long m_hPublicGroupHandle;

public:
               // IDataObject / IAdviseSink Data Stream Formats
   UINT     m_StreamData ;          // Item Data
   UINT     m_StreamDataTime ;      // Item Data with time
   UINT     m_StreamWrite ;         // Write Complete
               // WIDE CHARS version also!

               // Callback Interface Pointers
               // ---------------------------
               //    If the flag _Module.m_fMarshalCallbacks is TRUE then
               //    this pointers are used as cookies in the Global Interface Table;
               //    otherwise the callback interface pointers are stored.

               //    custom interface callback data
   DWORD 		  m_DataCallback;
   DWORD 		  m_DataTimeCallback;
   DWORD 		  m_WriteCallback;
               //    automation interface callback data
   DWORD          m_DataTimeCallbackDisp;
   DWORD          m_WriteCallbackDisp;

   DISPID         m_DataTimeCallbackMethodID;
   DISPID         m_WriteCallbackMethodID;

public:

               // the base update rate from which  m_Ticks
               // is actually calculated
               // protected by  m_UpdateRateCritSec
   DWORD m_ActualBaseUpdateRate;

               // information used to decide when to send
               // an update to the client depending on the
               // BaseUpdateRate
               // protected by m_UpdateRateCritSec !!!???
   DWORD m_TickCount;
   DWORD m_Ticks;

               // protects m_ActualBaseUpdateRate, m_Ticks  and  m_TickCount
   CRITICAL_SECTION m_UpdateRateCritSec;

               // Keep Alive
   DWORD m_dwKeepAliveTime;
   DWORD m_dwKeepAliveCount;
               // protects m_dwKeepAliveTime and m_dwKeepAliveCount
   CComAutoCriticalSection m_csKeepAlive;


               // Array of pointers to the thread handling objects for the group's 
               // async read, write and refresh requests
               // A class instance is created on each client request. 
               // It is deleted when the request is processed
   OpenArray<DaAsynchronousThread*> m_oaAsyncThread;

               // critical section used to access 
               // m_oaAsyncThread 
   CRITICAL_SECTION m_AsyncThreadsCritSec;

               // Critical section for accessing
               //    m_DataCallback;
               //    m_DataTimeCallback;
               //    m_WriteCallback;
               //    m_DataTimeCallbackDisp;
               //    m_WriteCallbackDisp;
               //    m_DataTimeCallbackMethodID;
               //    m_WriteCallbackMethodID;
   CRITICAL_SECTION m_CallbackCritSec;

               // Critical section for synchronisation of access to other member variables
   CRITICAL_SECTION m_CritSec;


   //////////////////////////////////////
   // METHODS                          //
   //////////////////////////////////////
public:

      //--------------------------------------------------------------
      //  Attach to class by incrementing the RefCount
      //  Returns the current RefCount
      //  or -1 if the ToKill flag is set
      //--------------------------------------------------------------
   int  Attach( void ); 

      //--------------------------------------------------------------
      //  Detach from class by decrementing the RefCount.
      //  Kill the class instance if request pending.
      //  Returns the current RefCount or -1 if it was killed.
      //--------------------------------------------------------------
   int  Detach( void );

      //--------------------------------------------------------------
      //  Kill the class instance.
      //  If the RefCount is > 0 then only the kill request flag is set.
      //  Returns the current RefCount or -1 if it was killed.
      //--------------------------------------------------------------
   int  Kill( void );

      //--------------------------------------------------------------
      // Tells whether the class instance was killed or not
      //--------------------------------------------------------------
   BOOL  Killed( void );




      //--------------------------------------------------------------
      // sets the name of a group
      // has to be called inside the group list critical section
      // and expects there is no name conflict with other groups
      // in the list of a server instance
      //--------------------------------------------------------------
   HRESULT set_Name( LPWSTR Name );

      //--------------------------------------------------------------
      // make the group public
      //--------------------------------------------------------------
   HRESULT MakePublic( long PGHandle );

      //--------------------------------------------------------------
      // tells whether group public or not
      // if public also returns the public group handle
      //--------------------------------------------------------------
   BOOL GetPublicInfo( long *pPGHandle);

      //--------------------------------------------------------------
      // if not done yet creates a COM Item for the 
      // already existing Generic Item inserting
      // it in the list m_oaCOMItems
      //--------------------------------------------------------------
   HRESULT GetCOMItem(
                  long           hServerHandle,
                  DaGenericItem   *item,
                  DaItem       **COMItem,
                  int            *created
                  );

      //--------------------------------------------------------------
      // Generic item access methods
      //
      // returns the item with given handle
      // and "nails" it, that is increments it's
      // reference count
      //--------------------------------------------------------------
   HRESULT GetGenericItem( 
                  long ItemServerHandle, 
                  DaGenericItem **item 
                  );

      //--------------------------------------------------------------
      // "unnails" the item with given handle
      //--------------------------------------------------------------
   HRESULT ReleaseGenericItem( 
                  long ItemServerHandle
                  );

      //--------------------------------------------------------------
      // removes an item from the group 
      // has to be called inside the item list critical section
      //--------------------------------------------------------------
   HRESULT RemoveGenericItemNoLock( 
                  long ItemServerHandle
                  );

      //--------------------------------------------------------------
      // has to be used to change the state of the group properly 
      //--------------------------------------------------------------
   HRESULT SetActiveState(
                  BOOL NewState 
                  );

      //--------------------------------------------------------------
      // used to get the state of a group  
      //--------------------------------------------------------------
   BOOL GetActiveState( void );

      //--------------------------------------------------------------
      // used to handle the Keep Alive time
      //--------------------------------------------------------------
   DWORD KeepAliveTime();

   HRESULT SetKeepAlive(
                  DWORD             dwKeepAliveTime,
                  DWORD          *  pdwRevisedKeepAliveTime );

   void ResetKeepAliveCounter();

      //--------------------------------------------------------------
      // reads the given items
      //--------------------------------------------------------------
   HRESULT InternalRead( 
                  DWORD             dwSource,
                  DWORD             numItems,
                  DaDeviceItem    ** ppItems, 
                  OPCITEMSTATE   *  pItemValues,
                  HRESULT        *  ppErrors,
                  BOOL           *  pfPhyval = NULL   // Only used by CALL-R
                  );

      //--------------------------------------------------------------
      // writes the given items
      //--------------------------------------------------------------
   HRESULT InternalWriteVQT(
                  DWORD             numItems,
                  DaDeviceItem    ** ppItems, 
                  OPCITEMVQT     *  pVQTs,
                  HRESULT        *  errors,
                  BOOL           *  pfPhyval = NULL     // Only used by CALL-R
                  );

      //--------------------------------------------------------------
      // sends async item read results to client (IAdvise callback)
      //--------------------------------------------------------------
   HRESULT SendDataStream(
                  BOOL           WithTime,
                  DWORD          NumItem, 
                  OPCITEMSTATE  *pItemValues,
                  DWORD          tid  
               );

      //--------------------------------------------------------------
      // sends async item write results to client (IAdvise callback)
      //--------------------------------------------------------------
   HRESULT SendWriteStream(
                  DWORD                NumItems, 
                  OPCITEMHEADERWRITE * pItemInfo,
                  HRESULT              Status,
                  DWORD                tid
               );

      //--------------------------------------------------------------
      // sends async item read results to client (IDispatch callback)
      //--------------------------------------------------------------
   HRESULT SendDataStreamDisp(
                  BOOL           WithTime,
                  long           NumItem, 
                  OPCITEMSTATE  *pItemValues,
                  DWORD          tid  
               );

      //--------------------------------------------------------------
      // sends async item write results to client (IDispatch callback)
      //--------------------------------------------------------------
   HRESULT SendWriteStreamDisp(
                  long                 NumItems, 
                  long                 *pClientHandles,
                  long                 *pError,
                  HRESULT              Status,
                  DWORD                tid
               );

      //--------------------------------------------------------------
      // Use this function if you need the device items associated
      // with the specified server item handles.
      //--------------------------------------------------------------
   HRESULT GetDItemsAndStates(
                  // OUT
                  /* [out][dwCount] */          HRESULT        ** ppErrors,
                  /* [out] */                   DWORD          *  pdwCountOut,
                  /* [out][*pdwCountOut] */     DaDeviceItem    ***pppDItems,
                  /* [out][*pdwCountOut] */     OPCITEMSTATE   ** ppItemStates
                  );

   HRESULT GetDItemsAndStates(
                  // IN
                  /* [in] */                    DWORD             dwCount,
                  /* [in][dwCount] */           OPCHANDLE      *  phServer,
                  /* [in][dwCount] */           DWORD          *  pdwMaxAges,
                  /* [in] */                    DWORD             dwAccessRightsFilter,
                  // OUT
                  /* [out][dwCount] */          HRESULT        ** ppErrors,
                  /* [out] */                   DWORD          *  pdwCountOut,
                  /* [out][*pdwCountOut] */     DaDeviceItem    ***pppDItems,
                  /* [out][*pdwCountOut] */     OPCITEMSTATE   ** ppItemStates,
                  /* [out][*pdwCountOut] */     DWORD          ** ppdwMaxAges
                  );

   HRESULT GetDItems(
                  // IN
                  /* [in] */                    DWORD             dwCount,
                  /* [in][dwCount] */           OPCHANDLE      *  phServer,
                  /* [in] */                    DWORD             dwAccessRightsFilter,
                  /* [in][out] */               VARIANT        *  pvValues,
                  // OUT
                  /* [out] */                   DWORD          *  pdwNumOfValidItems,
                  /* [out][dwCount] */          HRESULT        ** ppErrors,
                  /* [out][dwCount] */          DaDeviceItem    ***pppDItems
                  );

      //--------------------------------------------------------------
      // Builds a copy of an array of VARIANTs. Only the values with
      // a succeeded code in the corresponding error array are copied.
      //--------------------------------------------------------------
   HRESULT CopyVariantArrayForValidItems(
                  DWORD             dwCountAll,
                  HRESULT        *  errors,
                  VARIANT        *  pvarSrc,
                  DWORD             dwCountValid,
                  VARIANT        ** ppvarDest );

   HRESULT CopyVQTArrayForValidItems(
                  DWORD             dwCountAll,
                  HRESULT        *  errors,
                  OPCITEMVQT     *  pVQTsSrc,
                  DWORD             dwCountValid,
                  OPCITEMVQT     ** ppVQTsDest );

   void ResetLastReadOfAllGenericItems( void );

      //--------------------------------------------------------------
      // utility method
      //--------------------------------------------------------------
   HRESULT ReviseUpdateRate(
         long RequestedUpdateRate
      );

      //--------------------------------------------------------------
      // utility method to send Update to client (sink)
      //--------------------------------------------------------------
   HRESULT UpdateNotify( void );

      //--------------------------------------------------------------
      // returns the actual base update rate
      // from which   m_ticks  is calculated
      //--------------------------------------------------------------
   DWORD GetActualBaseUpdateRate( void);

      //--------------------------------------------------------------
      // sets the actual base update rate
      //--------------------------------------------------------------
   HRESULT SetActualBaseUpdateRate( DWORD BaseUpdateRate );

private:

      //--------------------------------------------------------------
      // utility method to send Update to client (sink)
      //--------------------------------------------------------------
   HRESULT UpdateToClient( BOOL custom, BOOL WithTime, BOOL DataCallbackOnly );

  };
//DOM-IGNORE-END

#endif // __GENERICGROUP_H_
