<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Technosoftware.DaAeHdaClient.Com</name>
    </assembly>
    <members>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.Interop">
            <summary>
            Defines COM marshalling/unmarshalling functions for AE.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.Convert(Technosoftware.DaAeHdaClient.Com.FILETIME)">
            <summary>
            Converts a standard FILETIME to an OpcRcw.Ae.FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.Convert(Technosoftware.OpcRcw.Ae.FILETIME)">
            <summary>
            Converts an OpcRcw.Ae.FILETIME to a standard FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetResultID(System.Int32)">
            <summary>
            Converts the HRESULT to a system type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetServerStatus(System.IntPtr@,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCEVENTSERVERSTATUS structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetBrowseType(Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType)">
            <summary>
            Converts a NodeType value to the OPCAEBROWSETYPE equivalent.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetEventNotifications(Technosoftware.OpcRcw.Ae.ONEVENTSTRUCT[])">
            <summary>
            Converts an array of ONEVENTSTRUCT structs to an array of EventNotification objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetEventNotification(Technosoftware.OpcRcw.Ae.ONEVENTSTRUCT)">
            <summary>
            Converts a ONEVENTSTRUCT struct to a EventNotification object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Interop.GetConditions(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Converts an array of OPCCONDITIONSTATE structs to an array of Condition objects.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.Result">
            <summary>
            Defines all well known COM AE HRESULT codes.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.S_ALREADYACKED">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.S_INVALIDBUFFERTIME">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.S_INVALIDMAXSIZE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.S_INVALIDKEEPALIVETIME">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.E_INVALIDBRANCHNAME">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.E_INVALIDTIME">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.E_BUSY">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Result.E_NOINFO">
            <remarks/>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.Server">
            <summary>
            A .NET wrapper for a COM server that implements the AE server interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.#ctor(Technosoftware.DaAeHdaClient.OpcUrl,System.Object)">
            <summary>
            Initializes the object with the specified OpcUrl and COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.GetServerStatus">
            <summary>
            Returns the current server status.
            </summary>
            <returns>The current server status.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.CreateSubscription(Technosoftware.DaAeHdaClient.Ae.TsCAeSubscriptionState)">
            <summary>
            Creates a new event subscription.
            </summary>
            <param name="state">The initial state for the subscription.</param>
            <returns>The new subscription object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QueryAvailableFilters">
            <summary>
            Returns the event filters supported by the server.
            </summary>
            <returns>A bit mask of all event filters supported by the server.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QueryEventCategories(System.Int32)">
            <summary>       
            Returns the event categories supported by the server for the specified event types.
            </summary>
            <param name="eventType">A bit mask for the event types of interest.</param>
            <returns>A collection of event categories.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QueryConditionNames(System.Int32)">
            <summary>
            Returns the condition names supported by the server for the specified event categories.
            </summary>
            <param name="eventCategory">A bit mask for the event categories of interest.</param>
            <returns>A list of condition names.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QuerySubConditionNames(System.String)">
            <summary>
            Returns the sub-condition names supported by the server for the specified event condition.
            </summary>
            <param name="conditionName">The name of the condition.</param>
            <returns>A list of sub-condition names.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QueryConditionNames(System.String)">
            <summary>
            Returns the condition names supported by the server for the specified event source.
            </summary>
            <param name="sourceName">The name of the event source.</param>
            <returns>A list of condition names.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.QueryEventAttributes(System.Int32)">
            <summary>       
            Returns the event attributes supported by the server for the specified event categories.
            </summary>
            <param name="eventCategory">A bit mask for the event categories of interest.</param>
            <returns>A collection of event attributes.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.TranslateToItemIDs(System.String,System.Int32,System.String,System.String,System.Int32[])">
            <summary>
            Returns the DA item ids for a set of attribute ids belonging to events which meet the specified filter criteria.
            </summary>
            <param name="sourceName">The event source of interest.</param>
            <param name="eventCategory">The id of the event category for the events of interest.</param>
            <param name="conditionName">The name of a condition within the event category.</param>
            <param name="subConditionName">The name of a sub-condition within a multi-state condition.</param>
            <param name="attributeIDs">The ids of the attributes to return item ids for.</param>
            <returns>A list of item urls for each specified attribute.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.GetConditionState(System.String,System.String,System.Int32[])">
            <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name.
            </summary>
            <param name="sourceName">The source name</param>
            <param name="conditionName">A condition name for the source.</param>
            <param name="attributeIDs">The list of attributes to return with the condition state.</param>
            <returns>The current state of the connection.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.EnableConditionByArea(System.String[])">
            <summary>
            Places the specified process areas into the enabled state.
            </summary>
            <param name="areas">A list of fully qualified area names.</param>
            <returns>The results of the operation for each area.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.DisableConditionByArea(System.String[])">
            <summary>
            Places the specified process areas into the disabled state.
            </summary>
            <param name="areas">A list of fully qualified area names.</param>
            <returns>The results of the operation for each area.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.EnableConditionBySource(System.String[])">
            <summary>
            Places the specified process areas into the enabled state.
            </summary>
            <param name="sources">A list of fully qualified source names.</param>
            <returns>The results of the operation for each area.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.DisableConditionBySource(System.String[])">
            <summary>
            Places the specified process areas into the disabled state.
            </summary>
            <param name="sources">A list of fully qualified source names.</param>
            <returns>The results of the operation for each area.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.GetEnableStateByArea(System.String[])">
            <summary>
            Returns the enabled state for the specified process areas. 
            </summary>
            <param name="areas">A list of fully qualified area names.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.GetEnableStateBySource(System.String[])">
            <summary>
            Returns the enabled state for the specified event sources. 
            </summary>
            <param name="sources">A list of fully qualified source names.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.AcknowledgeCondition(System.String,System.String,Technosoftware.DaAeHdaClient.Ae.TsCAeEventAcknowledgement[])">
            <summary>
            Used to acknowledge one or more conditions in the event server.
            </summary>
            <param name="acknowledgerID">The identifier for who is acknowledging the condition.</param>
            <param name="comment">A comment associated with the acknowledgment.</param>
            <param name="conditions">The conditions being acknowledged.</param>
            <returns>A list of result id indictaing whether each condition was successfully acknowledged.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.Browse(System.String,Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType,System.String)">
            <summary>
            Browses for all children of the specified area that meet the filter criteria.
            </summary>
            <param name="areaID">The full-qualified id for the area.</param>
            <param name="browseType">The type of children to return.</param>
            <param name="browseFilter">The expression used to filter the names of children returned.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.Browse(System.String,Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType,System.String,System.Int32,Technosoftware.DaAeHdaClient.IOpcBrowsePosition@)">
            <summary>
            Browses for all children of the specified area that meet the filter criteria.
            </summary>
            <param name="areaID">The full-qualified id for the area.</param>
            <param name="browseType">The type of children to return.</param>
            <param name="browseFilter">The expression used to filter the names of children returned.</param>
            <param name="maxElements">The maximum number of elements to return.</param>
            <param name="position">The object used to continue the browse if the number nodes exceeds the maximum specified.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.BrowseNext(System.Int32,Technosoftware.DaAeHdaClient.IOpcBrowsePosition@)">
            <summary>
            Continues browsing the server's address space at the specified position.
            </summary>
            <param name="maxElements">The maximum number of elements to return.</param>
            <param name="position">The position object used to continue a browse operation.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.InitializeBrowser">
            <summary>
            Creates an area browser object for use by all browse requests.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.ChangeBrowsePosition(System.String)">
            <summary>
            Moves the browse position prior to executing a browse operation.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.CreateEnumerator(Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType,System.String)">
            <summary>
            Creates an enumerator for the names at the current position.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.GetQualifiedName(System.String,Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType)">
            <summary>
            Returns the qualified name for the node at the current position.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Server.FetchElements(Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType,System.Int32,System.Runtime.InteropServices.ComTypes.IEnumString,System.Collections.ArrayList)">
            <summary>
            Fetches up to max elements and returns an flag indicating whether there are any elements left.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.BrowsePosition">
            <summary>
            Stores the state of a browse operation.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.BrowsePosition.#ctor(System.String,Technosoftware.DaAeHdaClient.Ae.TsCAeBrowseType,System.String,System.Runtime.InteropServices.ComTypes.IEnumString)">
            <summary>
            Saves the parameters for an incomplete browse information.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.BrowsePosition.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Ae.BrowsePosition.Enumerator">
            <summary>
            Returns the enumerator stored in the object.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.Subscription">
            <summary>
            A .NET wrapper for a COM server that implements the AE subscription interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.#ctor(Technosoftware.DaAeHdaClient.Ae.TsCAeSubscriptionState,System.Object)">
            <summary>
            Initializes the object with the specified URL and COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Finalize">
            <summary>
            The finalizer.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.DataChangedEvent">
            <summary>
            An event to receive data change updates.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.GetState">
            <summary>
            Returns the current state of the subscription.
            </summary>
            <returns>The current state of the subscription.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.ModifyState(System.Int32,Technosoftware.DaAeHdaClient.Ae.TsCAeSubscriptionState)">
            <summary>
            Changes the state of a subscription.
            </summary>
            <param name="masks">A bit mask that indicates which elements of the subscription state are changing.</param>
            <param name="state">The new subscription state.</param>
            <returns>The actual subscription state after applying the changes.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.GetFilters">
            <summary>
            Returns the current filters for the subscription.
            </summary>
            <returns>The current filters for the subscription.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.SetFilters(Technosoftware.DaAeHdaClient.Ae.TsCAeSubscriptionFilters)">
            <summary>
            Sets the current filters for the subscription.
            </summary>
            <param name="filters">The new filters to use for the subscription.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.GetReturnedAttributes(System.Int32)">
            <summary>
            Returns the set of attributes to return with event notifications.
            </summary>
            <returns>The set of attributes to returned with event notifications.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.SelectReturnedAttributes(System.Int32,System.Int32[])">
            <summary>
            Selects the set of attributes to return with event notifications.
            </summary>
            <param name="eventCategory">The specific event category for which the attributes apply.</param>
            <param name="attributeIDs">The list of attribute ids to return.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Refresh">
            <summary>
            Force a refresh for all active conditions and inactive, unacknowledged conditions whose event notifications match the filter of the event subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.CancelRefresh">
            <summary>
            Cancels an outstanding refresh request.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Callback">
            <summary>
            A class that implements the IOPCEventSink interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Callback.#ctor(System.Object)">
            <summary>
            Initializes the object with the containing subscription object.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Callback.DataChangedEvent">
            <summary>
            Raised when data changed callbacks arrive.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Callback.OnEvent(System.Int32,System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Ae.ONEVENTSTRUCT[])">
            <summary>
            Called when a data changed event is received.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Advise">
            <summary>
            Establishes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.Unadvise">
            <summary>
            Closes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Ae.Subscription.lock_">
            <summary>
            The synchronization object for subscription access
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ApplicationInstance">
            <summary>
            Manages the license to enable the different product versions.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel">
            <summary>
            The possible authentication levels.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Default">
            <summary>
            Tells DCOM to choose the authentication level using its normal security blanket negotiation algorithm.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.None">
            <summary>
            Performs no authentication.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Connect">
            <summary>
            Authenticates the credentials of the client only when the client establishes a relationship with the server. Datagram transports always use Packet instead.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Call">
            <summary>
            Authenticates only at the beginning of each remote procedure call when the server receives the request. Datagram transports use Packet instead.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Packet">
            <summary>
            Authenticates that all data received is from the expected client.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Integrity">
            <summary>
            Authenticates and verifies that none of the data transferred between client and server has been modified.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel.Privacy">
            <summary>
            Authenticates all previous levels and encrypts the argument value of each remote procedure call.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ApplicationInstance.InitializeSecurity(Technosoftware.DaAeHdaClient.Com.ApplicationInstance.AuthenticationLevel)">
            <summary>
            Initializes COM security. This should be called directly at the beginning of an application and can only be called once.
            </summary>
            <param name="authenticationLevel">The default authentication level for the process. Both servers and clients use this parameter when they call CoInitializeSecurity. With the Windows Update KB5004442 a higher authentication level of Integrity must be used.</param>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ComUtils">
            <summary>
            Exposes WIN32 and COM API functions.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.EnumComputers">
            <summary>
            Enumerates computers on the local network.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ComUtils.LOCALE_SYSTEM_DEFAULT">
            <summary>
            The WIN32 system default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ComUtils.LOCALE_USER_DEFAULT">
            <summary>
            The WIN32 user default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ComUtils.FILETIME_BaseTime">
            <summary>
            The base for the WIN32 FILETIME structure.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ComUtils.GUID">
            <summary>
            WIN32 GUID struct declaration.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ComUtils.VARIANT_SIZE">
            <summary>
            The size, in bytes, of a VARIANT structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.VariantInit(System.IntPtr)">
            <summary>
            Intializes a pointer to a VARIANT.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.VariantClear(System.IntPtr)">
            <summary>
            Frees all memory referenced by a VARIANT stored in unmanaged memory.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CoInitializeEx(System.IntPtr,Technosoftware.DaAeHdaClient.Com.ComUtils.COINIT)">
            <returns>If function succeeds, it returns 0(S_OK). Otherwise, it returns an error code.</returns>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ComUtils.ServerInfo">
            <summary>
            A class used to allocate and deallocate the elements of a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.ServerInfo.Allocate(System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Allocates a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.ServerInfo.Deallocate">
            <summary>
            Deallocated memory allocated when the COSERVERINFO structure was created.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.InitializeSecurity">
            <summary>
            Initializes COM security.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.IsLocalHost(System.String)">
            <summary>
            Determines if the host is the local host.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateInstance(System.Guid,System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Creates an instance of a COM server using the specified license key.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateInstance1(System.Guid,System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Creates an instance of a COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.GetErrorText(System.Type,System.Int32)">
            <summary>
            Returns the symbolic name for the specified error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.GetErrorCode(System.Exception,System.Int32)">
            <summary>
            Gets the error code for the exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="defaultCode">The default code.</param>
            <returns>The error code</returns>
            <remarks>This method ignores the exception but makes it possible to keep track of ignored exceptions.</remarks>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.ReleaseServer(System.Object)">
            <summary>
            Releases the server if it is a true COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.GetSystemMessage(System.Int32,System.Int32)">
            <summary>
            Retrieves the system message text for the specified error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateComException(System.Exception,System.Int32)">
            <summary>
            Converts an exception to an exception that returns a COM error code.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateComException(System.String,System.Int32)">
            <summary>
            Creates a COM exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateComException(System.Int32)">
            <summary>
            Converts an exception to an exception that returns a COM error code.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateComException(System.Exception)">
            <summary>
            Converts an exception to an exception that returns a COM error code.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CreateException(System.Exception,System.String)">
            <summary>
            Creates an error message for a failed COM function call.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.IsRpcError(System.Exception)">
            <summary>
            Checks if the error is an RPC error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.IsUnknownError(System.Exception,System.Int32[])">
            <summary>
            Checks if the error for the exception is one of the recognized errors.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.CompareLocales(System.Int32,System.String,System.Boolean)">
            <summary>
            Compares a string locale to a WIN32 localeId
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ComUtils.TraceComError(System.Exception,System.String,System.Object[])">
            <summary>
            Reports an unexpected exception during a COM operation. 
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ConnectionPoint">
            <summary>
            Adds and removes a connection point to a server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.server_">
            <summary>
            The COM server that supports connection points.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.cookie_">
            <summary>
            The id assigned to the connection by the COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.refs_">
            <summary>
            The number of times Advise() has been called without a matching Unadvise(). 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.#ctor(System.Object,System.Guid)">
            <summary>
            Initializes the object by finding the specified connection point.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.Cookie">
            <summary> 
            The cookie returned in the advise call. 
            </summary> 
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.Advise(System.Object)">
            <summary>
            Establishes a connection, if necessary and increments the reference count.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ConnectionPoint.Unadvise">
            <summary>
            Decrements the reference count and closes the connection if no more references.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da20.Server">
            <summary>
            An in-process wrapper for a remote OPC Data Access 2.0X server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.#ctor">
            <summary>
            The default constructor for the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.#ctor(Technosoftware.DaAeHdaClient.OpcUrl,System.Object)">
            <summary>
            Initializes the object with the specified COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.Dispose">
            <summary>
            This must be called explicitly by clients to ensure the COM server is released.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.Initialize(Technosoftware.DaAeHdaClient.OpcUrl,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Connects to the server with the specified URL and credentials.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.Server.subscription_">
            <summary>
            A global subscription used for various item level operations. 
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.Server.groupHandle_">
            <summary>
            The server handle for the global subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.Server.browseToSupported_">
            <summary>
            True if BROWSE_TO is supported; otherwise false.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.Server.separators_">
            <summary>
            A list of seperators used in the browse paths.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.Read(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Reads the values for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.Write(Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Write the values for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.Browse(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,Technosoftware.DaAeHdaClient.Da.TsCDaBrowsePosition@)">
            <summary>
            Fetches child elements of the specified branch which match the filter criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.BrowseNext(Technosoftware.DaAeHdaClient.Da.TsCDaBrowsePosition@)">
            <summary>
            Continues a browse operation with previously specified search criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetProperties(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsDaPropertyID[],System.Boolean)">
            <summary>
            Returns the specified properties for a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.AddItems(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Adds a set of temporary items used for a read/write operation.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.RemoveItems(Technosoftware.DaAeHdaClient.OpcItemResult[])">
            <summary>
            Removes a set of temporary items used for a read/write operation.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.ReadValues(Technosoftware.DaAeHdaClient.Da.TsCDaItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItemValueResult[],System.Boolean)">
            <summary>
            Reads a set of values.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetAvailableProperties(System.String)">
            <summary>
            Returns the set of available properties for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetItemIDs(System.String,Technosoftware.DaAeHdaClient.Da.TsCDaItemProperty[])">
            <summary>
            Fetches the property item id for the specified set of properties.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetValues(System.String,Technosoftware.DaAeHdaClient.Da.TsCDaItemProperty[])">
            <summary>
            Fetches the property values for the specified set of properties.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetProperties(System.String,Technosoftware.DaAeHdaClient.Da.TsDaPropertyID[],System.Boolean)">
            <summary>
            Gets the specified properties for the specified item.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetEnumerator(System.String,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,System.Boolean,System.Boolean)">
            <summary>
            Returns an enumerator for the children of the specified branch.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.DetectAndSaveSeparators(System.String,System.String)">
            <summary>
            Detects the separators used in the item id.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetElement(Technosoftware.DaAeHdaClient.OpcItem,System.String,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,System.Boolean)">
            <summary>
            Reads a single value from the enumerator and returns a browse element.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.GetElements(System.Int32,Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,System.Boolean,Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition@)">
            <summary>
            Returns a list of child elements that meet the filter criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Server.CreateSubscription(System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState,System.Int32)">
            <summary>
            Creates a new instance of a subscription.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition">
            <summary>
            Implements an object that handles multi-step browse operations for DA2.05 servers.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.Enumerator">
            <summary>
            The enumerator for a browse operation.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.IsBranch">
            <summary>
            Whether the current enumerator returns branches or leaves.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.Names">
            <summary>
            The pre-fetched set of names.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.Index">
            <summary>
            The current index in the pre-fetched names.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.#ctor(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,Technosoftware.DaAeHdaClient.Com.EnumString,System.Boolean)">
            <summary>
            Initializes a browse position 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.Dispose">
            <summary>
            Releases unmanaged resources held by the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.BrowsePosition.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da20.Subscription">
            <summary>
            An in-process wrapper for a remote OPC Data Access 2.0X subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.#ctor(System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState,System.Int32)">
            <summary>
            Initializes a new instance of a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.GetState">
            <summary>
            Returns the current state of the subscription.
            </summary>
            <returns>The current state of the subscription.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.Refresh">
            <summary>
            Tells the server to send an data change update for all subscription items containing the cached values. 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.SetEnabled(System.Boolean)">
            <summary>
            Sets whether data change callbacks are enabled.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.GetEnabled">
            <summary>
            Gets whether data change callbacks are enabled.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.Read(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Reads a set of items using DA2.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.Read(Technosoftware.DaAeHdaClient.Da.TsCDaItemValueResult[],System.Boolean)">
            <summary>
            Reads a set of values.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.Write(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Writes a set of items using DA2.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.BeginRead(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItem[],System.Int32,System.Int32@)">
            <summary>
            Begins an asynchronous read of a set of items using DA2.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da20.Subscription.BeginWrite(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[],System.Int32,System.Int32@)">
            <summary>
            Begins an asynchronous write for a set of items using DA2.0 interfaces.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.BrowsePosition">
            <summary>
            Implements an object that handles multi-step browse operations.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.BrowsePosition.ContinuationPoint">
            <summary>
            The continuation point for a browse operation.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.BrowsePosition.MoreElements">
            <summary>
            Indicates that elements that meet the filter criteria have not been returned.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.BrowsePosition.#ctor(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,System.String)">
            <summary>
            Initializes a browse position 
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Interop">
            <summary>
            Contains state information for a single asynchronous Technosoftware.DaAeHdaClient.Com.Da.Interop.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.Convert(Technosoftware.DaAeHdaClient.Com.FILETIME)">
            <summary>
            Converts a standard FILETIME to an OpcRcw.Da.FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.Convert(Technosoftware.OpcRcw.Da.FILETIME)">
            <summary>
            Converts an OpcRcw.Da.FILETIME to a standard FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetServerStatus(Technosoftware.DaAeHdaClient.OpcServerStatus,System.Int32)">
            <summary>
            Allocates and marshals a OPCSERVERSTATUS structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetServerStatus(System.IntPtr@,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCSERVERSTATUS structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseFilter(Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilter)">
            <summary>
            Converts a browseFilter values to the COM equivalent.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseFilter(Technosoftware.OpcRcw.Da.OPCBROWSEFILTER)">
            <summary>
            Converts a browseFilter values from the COM equivalent.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetHRESULTs(Technosoftware.DaAeHdaClient.IOpcResult[])">
            <summary>
            Allocates and marshals an array of HRESULT codes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseElements(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCBROWSEELEMENT structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseElements(Technosoftware.DaAeHdaClient.Da.TsCDaBrowseElement[],System.Boolean)">
            <summary>
            Allocates and marshals an array of OPCBROWSEELEMENT structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseElement(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCBROWSEELEMENT structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetBrowseElement(Technosoftware.DaAeHdaClient.Da.TsCDaBrowseElement,System.Boolean)">
            <summary>
            Allocates and marshals an OPCBROWSEELEMENT structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetPropertyIDs(Technosoftware.DaAeHdaClient.Da.TsDaPropertyID[])">
            <summary>
            Creates an array of property codes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetPropertyIDs(System.Int32[])">
            <summary>
            Creates an array of property codes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemPropertyCollections(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCITEMPROPERTIES structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemPropertyCollections(Technosoftware.DaAeHdaClient.Da.TsCDaItemPropertyCollection[])">
            <summary>
            Allocates and marshals an array of OPCITEMPROPERTIES structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemProperties(Technosoftware.OpcRcw.Da.OPCITEMPROPERTIES@,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCITEMPROPERTIES structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemProperties(Technosoftware.DaAeHdaClient.Da.TsCDaItemProperty[])">
            <summary>
            Allocates and marshals an array of OPCITEMPROPERTIES structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemProperty(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCITEMPROPERTY structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemProperty(Technosoftware.DaAeHdaClient.Da.TsCDaItemProperty)">
            <summary>
            Allocates and marshals an arary of OPCITEMPROPERTY structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetPropertyID(System.Int32)">
            <remarks/>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.UnmarshalPropertyValue(Technosoftware.DaAeHdaClient.Da.TsDaPropertyID,System.Object)">
            <summary>
            Converts the property value to a type supported by the unified interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.MarshalPropertyValue(Technosoftware.DaAeHdaClient.Da.TsDaPropertyID,System.Object)">
            <summary>
            Converts the property value to a type supported by COM-DA interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetOPCITEMVQTs(Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Converts an array of item values to an array of OPCITEMVQT objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetOPCITEMDEFs(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Converts an array of item objects to an array of GetOPCITEMDEF objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemValues(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCITEMSTATE structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemResults(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates a OPCITEMRESULT structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Interop.GetItemStates(Technosoftware.DaAeHdaClient.Da.TsCDaItemValueResult[])">
            <summary>
            Allocates and marshals an array of OPCBROWSEELEMENT structures.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Result">
            <summary>
            Defines all well known COM DA HRESULT codes.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_OK">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_FALSE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_NOTIMPL">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_OUTOFMEMORY">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDARG">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_NOINTERFACE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_POINTER">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_FAIL">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.CONNECT_E_NOCONNECTION">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.CONNECT_E_ADVISELIMIT">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.DISP_E_TYPEMISMATCH">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.DISP_E_OVERFLOW">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDHANDLE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_BADTYPE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_PUBLIC">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_BADRIGHTS">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_UNKNOWNITEMID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDITEMID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDFILTER">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_UNKNOWNPATH">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_RANGE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_DUPLICATENAME">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_UNSUPPORTEDRATE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_CLAMP">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_INUSE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDCONFIGFILE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_NOTFOUND">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALID_PID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_DEADBANDNOTSET">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_DEADBANDNOTSUPPORTED">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_NOBUFFERING">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_INVALIDCONTINUATIONPOINT">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.S_DATAQUEUEOVERFLOW">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_RATENOTSET">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Result.E_NOTSUPPORTED">
            <remarks/>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Server">
            <summary>
            A .NET wrapper for a COM server that implements the DA server interfaces.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Server.filters_">
            <summary>
            The default result filters for the server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Server.subscriptions_">
            <summary>
            A table of active subscriptions for the server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.#ctor(Technosoftware.DaAeHdaClient.OpcUrl,System.Object)">
            <summary>
            Initializes the object with the specified COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.GetErrorText(System.String,Technosoftware.DaAeHdaClient.OpcResult)">
            <summary>
            Returns the localized text for the specified result code.
            </summary>
            <param name="locale">The locale name in the format "[languagecode]-[country/regioncode]".</param>
            <param name="resultId">The result code identifier.</param>
            <returns>A message localized for the best match for the requested locale.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.GetResultFilters">
            <summary>
            Returns the filters applied by the server to any item results returned to the client.
            </summary>
            <returns>A bit mask indicating which fields should be returned in any item results.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.SetResultFilters(System.Int32)">
            <summary>
            Sets the filters applied by the server to any item results returned to the client.
            </summary>
            <param name="filters">A bit mask indicating which fields should be returned in any item results.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.GetServerStatus">
            <summary>
            Returns the current server status.
            </summary>
            <returns>The current server status.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.Read(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Reads the current values for a set of items. 
            </summary>
            <param name="items">The set of items to read.</param>
            <returns>The results of the read operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.Write(Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Writes the value, quality and timestamp for a set of items.
            </summary>
            <param name="items">The set of item values to write.</param>
            <returns>The results of the write operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.CreateSubscription(Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState)">
            <summary>
            Creates a new subscription.
            </summary>
            <param name="state">The initial state of the subscription.</param>
            <returns>The new subscription object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.CancelSubscription(Technosoftware.DaAeHdaClient.Da.ITsCDaSubscription)">
            <summary>
            Cancels a subscription and releases all resources allocated for it.
            </summary>
            <param name="subscription">The subscription to cancel.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.Browse(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Da.TsCDaBrowseFilters,Technosoftware.DaAeHdaClient.Da.TsCDaBrowsePosition@)">
            <summary>
            Fetches the children of a branch that meet the filter criteria.
            </summary>
            <param name="itemId">The identifier of branch which is the target of the search.</param>
            <param name="filters">The filters to use to limit the set of child elements returned.</param>
            <param name="position">An object used to continue a browse that could not be completed.</param>
            <returns>The set of elements found.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.BrowseNext(Technosoftware.DaAeHdaClient.Da.TsCDaBrowsePosition@)">
            <summary>
            Continues a browse operation with previously specified search criteria.
            </summary>
            <param name="position">An object containing the browse operation state information.</param>
            <returns>The set of elements found.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.GetProperties(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsDaPropertyID[],System.Boolean)">
            <summary>
            Returns the item properties for a set of items.
            </summary>
            <param name="itemIds">A list of item identifiers.</param>
            <param name="propertyIDs">A list of properties to fetch for each item.</param>
            <param name="returnValues">Whether the property values should be returned with the properties.</param>
            <returns>A list of properties for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.ChangeType(System.Object,System.Type,System.String)">
            <summary>
            Converts a value to the specified type using the specified locale.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.CreateSubscription(System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState,System.Int32)">
            <summary>
            Creates a new instance of a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Server.ProcessResults(Technosoftware.DaAeHdaClient.Da.TsCDaBrowseElement[],Technosoftware.DaAeHdaClient.Da.TsDaPropertyID[])">
            <summary>
            Updates the properties to convert COM values to OPC .NET API results.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Subscription">
            <summary>
            A .NET wrapper for a COM server that implements the DA subscription interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.#ctor(System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState,System.Int32)">
            <summary>
            Initializes a new instance of a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Finalize">
            <summary>
            The finalizer.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Dispose">
            <summary>
            Releases unmanaged resources held by the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.subscription_">
            <summary>
            The COM server for the subscription object.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.connection_">
            <summary>
            A connect point with the COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.callback_">
            <summary>
            The internal object that implements the IOPCDataCallback interface.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.name_">
            <summary>
            The name of the subscription on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription._handle">
            <summary>
            A handle assigned by the client for the subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription._filters">
            <summary>
            The default result filters for the subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.items_">
            <summary>
            A table of all item identifers which are indexed by internal handle.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription._counter">
            <summary>
            A counter used to assign unique internal client handles.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.lock_">
            <summary>
            The synchronization object for subscription access
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Da.Subscription.DataChangedEvent">
            <summary>
            An event to receive data change updates.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.GetResultFilters">
            <summary>
            Returns the filters applied by the server to any item results returned to the client.
            </summary>
            <returns>A bit mask indicating which fields should be returned in any item results.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetResultFilters(System.Int32)">
            <summary>
            Sets the filters applied by the server to any item results returned to the client.
            </summary>
            <param name="filters">A bit mask indicating which fields should be returned in any item results.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.GetState">
            <summary>
            Returns the current state of the subscription.
            </summary>
            <returns>The current state of the subscription.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ModifyState(System.Int32,Technosoftware.DaAeHdaClient.Da.TsCDaSubscriptionState)">
            <summary>
            Changes the state of a subscription.
            </summary>
            <param name="masks">A bit mask that indicates which elements of the subscription state are changing.</param>
            <param name="state">The new subscription state.</param>
            <returns>The actual subscption state after applying the changes.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.AddItems(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Adds items to the subscription.
            </summary>
            <param name="items">The set of items to add to the subscription.</param>
            <returns>The results of the add item operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ModifyItems(System.Int32,Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Modifies the state of items in the subscription
            </summary>
            <param name="masks">Specifies which item state parameters are being modified.</param>
            <param name="items">The new state for each item.</param>
            <returns>The results of the modify item operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.RemoveItems(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Removes items from the subscription.
            </summary>
            <param name="items">The identifiers (i.e. server handles) for the items being removed.</param>
            <returns>The results of the remove item operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Read(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Reads the values for a set of items in the subscription.
            </summary>
            <param name="items">The identifiers (i.e. server handles) for the items being read.</param>
            <returns>The value for each of items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Write(Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Writes the value, quality and timestamp for a set of items in the subscription.
            </summary>
            <param name="items">The item values to write.</param>
            <returns>The results of the write operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Read(Technosoftware.DaAeHdaClient.Da.TsCDaItem[],System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaReadCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Begins an asynchronous read operation for a set of items.
            </summary>
            <param name="items">The set of items to read (must include the item name).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Write(Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[],System.Object,Technosoftware.DaAeHdaClient.Da.TsCDaWriteCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Begins an asynchronous write operation for a set of items.
            </summary>
            <param name="items">The set of item values to write (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Cancel(Technosoftware.DaAeHdaClient.IOpcRequest,Technosoftware.DaAeHdaClient.Da.TsCDaCancelCompleteEventHandler)">
            <summary>
            Cancels an asynchronous read or write operation.
            </summary>
            <param name="request">The object returned from the BeginRead or BeginWrite request.</param>
            <param name="callback">The function to invoke when the cancel completes.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Refresh">
            <summary>
            Causes the server to send a data changed notification for all active items. 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Refresh(System.Object,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Causes the server to send a data changed notification for all active items. 
            </summary>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetEnabled(System.Boolean)">
            <summary>
            Enables or disables data change notifications from the server.
            </summary>
            <param name="enabled">Whether data change notifications are enabled.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.GetEnabled">
            <summary>
            Checks whether data change notifications from the server are enabled.
            </summary>
            <returns>Whether data change notifications are enabled.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.BeginComCall``1(System.String,System.Boolean)">
            <summary>
            Must be called before any COM call.
            </summary>
            <typeparam name="T">The interface to used when making the call.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="isRequiredInterface">if set to <c>true</c> interface is an required interface and and exception is thrown on error.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ComCallError(System.String,System.Exception)">
            <summary>
            Must called if a COM call returns an unexpected exception.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="e">The exception.</param>
            <remarks>Note that some COM calls are expected to return errors.</remarks>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.EndComCall(System.String)">
            <summary>
            Must be called in the finally block after making a COM call.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Read(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Reads a set of items using DA3.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Write(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[])">
            <summary>
            Writes a set of items using DA3.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.BeginRead(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItem[],System.Int32,System.Int32@)">
            <summary>
            Begins an asynchronous read of a set of items using DA3.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.BeginWrite(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.Da.TsCDaItemValue[],System.Int32,System.Int32@)">
            <summary>
            Begins an asynchronous write for a set of items using DA3.0 interfaces.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetReqTypes(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Sets the requested data type for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetActive(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[],System.Boolean)">
            <summary>
            Sets the active state for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.UpdateActive(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Update the active state for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetDeadbands(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Sets the deadbands for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ClearDeadbands(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Clears the deadbands for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.UpdateDeadbands(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Update the deadbands for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetSamplingRates(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Sets the sampling rates for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ClearSamplingRates(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Clears the sampling rates for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.UpdateSamplingRates(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Update the sampling rates for the specified items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.SetEnableBuffering(Technosoftware.DaAeHdaClient.Da.TsCDaItemResult[])">
            <summary>
            Sets the enable buffering flags.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Advise">
            <summary>
            Establishes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Unadvise">
            <summary>
            Closes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable">
            <summary>
            A table of item identifiers indexed by internal handle.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.Item(System.Object)">
            <summary>
            Looks up an item identifier for the specified internal handle.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.GetInvalidHandle">
            <summary>
            Returns a server handle that must be treated as invalid by the server,
            </summary>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.GetItemIDs(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Copies a set of items an substitutes the client and server handles for use by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.CreateItems(Technosoftware.DaAeHdaClient.Da.TsCDaItem[])">
            <summary>
            Creates a item result list from a set of items and sets the handles for use by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.ApplyFilters(System.Int32,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Updates a result list based on the request options and sets the handles for use by the client.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable.items_">
            <summary>
            The table of known item identifiers.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback">
            <summary>
            A class that implements the IOPCDataCallback interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.#ctor(System.Object,System.Int32,Technosoftware.DaAeHdaClient.Com.Da.Subscription.ItemTable)">
            <summary>
            Initializes the object with the containing subscription object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.SetFilters(System.Object,System.Int32)">
            <summary>
            Updates the result filters and subscription handle.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.BeginRequest(Technosoftware.DaAeHdaClient.Com.Da.Request)">
            <summary>
            Adds an asynchrounous request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.CancelRequest(Technosoftware.DaAeHdaClient.Com.Da.Request)">
            <summary>
            Returns true is an asynchrounous request can be cancelled.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.EndRequest(Technosoftware.DaAeHdaClient.Com.Da.Request)">
            <summary>
            Remvoes an asynchrounous request.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.handle_">
            <summary>
            The handle to return with any callbacks. 
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.filters_">
            <summary>
            The current request options for the subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.items_">
            <summary>
            A table of item identifiers indexed by internal handle.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.requests_">
            <summary>
            A table of autstanding asynchronous requests.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.DataChangedEvent">
            <summary>
            Raised when data changed callbacks arrive.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback._dataChangedEvent">
            <remarks/>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.OnDataChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Object[],System.Int16[],Technosoftware.OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            Called when a data changed event is received.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Subscription.Callback.UnmarshalValues(System.Int32,System.Int32[],System.Object[],System.Int16[],Technosoftware.OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            Creates an array of item value result objects from the callback data.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Da.Request">
            <summary>
            Contains the state of an asynchronous request to a COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Request.RequestID">
            <summary>
            The unique id assigned by the subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Request.CancelID">
            <summary>
            The unique id assigned by the server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Request.Callback">
            <summary>
            The callback used when the request completes.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Request.Filters">
            <summary>
            The result filters to use for the request.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Da.Request.InitialResults">
            <summary>
            The set of initial results.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.#ctor(Technosoftware.DaAeHdaClient.Da.ITsCDaSubscription,System.Object,System.Int32,System.Int32,System.Delegate)">
            <summary>
            Initializes the object with a subscription and a unique id.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.BeginRead(System.Int32,Technosoftware.DaAeHdaClient.OpcItemResult[])">
            <summary>
            Begins a read request by storing the initial results.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.BeginWrite(System.Int32,Technosoftware.DaAeHdaClient.OpcItemResult[])">
            <summary>
            Begins a write request by storing the initial results.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.BeginRefresh(System.Int32)">
            <summary>
            Begins a refersh request by saving the cancel id.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.EndRequest">
            <summary>
            Completes a read request by processing the values and invoking the callback.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.EndRequest(Technosoftware.DaAeHdaClient.Da.TsCDaItemValueResult[])">
            <summary>
            Completes a read request by processing the values and invoking the callback.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Da.Request.EndRequest(Technosoftware.DaAeHdaClient.OpcItemResult[])">
            <summary>
            Completes a write request by processing the values and invoking the callback.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Cpx.Result">
            <summary>
            Defines all well known Complex Data HRESULT codes.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Cpx.Result.E_TYPE_CHANGED">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Cpx.Result.E_FILTER_DUPLICATE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Cpx.Result.E_FILTER_INVALID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Cpx.Result.E_FILTER_ERROR">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Cpx.Result.S_FILTER_NO_DATA">
            <remarks/>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.EnumString">
            <summary>
            A wrapper for the COM IEnumString interface.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.EnumString.m_enumerator">
            <summary>
            A reference to the remote COM object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.#ctor(System.Object)">
            <summary>
            Initializes the object with an enumerator.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.Dispose">
            <summary>
            Releases the remote COM object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.Next(System.Int32)">
            <summary>
            Fetches the next subscription of strings. 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.Skip(System.Int32)">
            <summary>
            Skips a number of strings.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.Reset">
            <summary>
            Sets pointer to the start of the list.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.EnumString.Clone">
            <summary>
            Clones the enumerator.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Factory">
            <summary>
            The default class used to instantiate server objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Factory.#ctor">
            <summary>
            Initializes an instance for use for in process objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Factory.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Contructs a server by de-serializing its URL from the stream.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Factory.CreateInstance(Technosoftware.DaAeHdaClient.OpcUrl,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Creates a new instance of the server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Factory.Connect(Technosoftware.DaAeHdaClient.OpcUrl,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Connects to the specified COM server.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.FILETIME">
            <summary>
            The COM FILETIME structure.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.FILETIME.dwLowDateTime">
            <summary>
            The least significant DWORD.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.FILETIME.dwHighDateTime">
            <summary>
            The most significant DWORD.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.Browser">
            <summary>
            An in-process wrapper an OPC HDA browser object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.#ctor(Technosoftware.DaAeHdaClient.Com.Hda.Server,Technosoftware.OpcRcw.Hda.IOPCHDA_Browser,Technosoftware.DaAeHdaClient.Hda.TsCHdaBrowseFilter[],Technosoftware.DaAeHdaClient.OpcResult[])">
            <summary>
            Initializes the object with the specifed COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.Dispose">
            <summary>
            This must be called explicitly by clients to ensure the COM server is released.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Browser.Filters">
            <summary>
            Returns the set of attribute filters used by the browser. 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.Browse(Technosoftware.DaAeHdaClient.OpcItem)">
            <summary>
            Browses the server's address space at the specified branch.
            </summary>
            <param name="itemID">The item id of the branch to search.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.Browse(Technosoftware.DaAeHdaClient.OpcItem,System.Int32,Technosoftware.DaAeHdaClient.IOpcBrowsePosition@)">
            <summary>
            Begins a browsing the server's address space at the specified branch.
            </summary>
            <param name="itemID">The item id of the branch to search.</param>
            <param name="maxElements">The maximum number of elements to return.</param>
            <param name="position">The position object used to continue a browse operation.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.BrowseNext(System.Int32,Technosoftware.DaAeHdaClient.IOpcBrowsePosition@)">
            <summary>
            Continues browsing the server's address space at the specified position.
            </summary>
            <param name="maxElements">The maximum number of elements to return.</param>
            <param name="position">The position object used to continue a browse operation.</param>
            <returns>The set of elements that meet the filter criteria.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.GetEnumerator(System.Boolean)">
            <summary>
            Creates an enumerator for the elements contained with the current branch.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Browser.FetchElements(Technosoftware.DaAeHdaClient.Com.EnumString,System.Int32,System.Boolean)">
            <summary>
            Fetches the element names and item ids for each element.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition">
            <summary>
            Stores the state of a browse operation that was halted.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition.#ctor(System.String,Technosoftware.DaAeHdaClient.Com.EnumString,System.Boolean)">
            <summary>
            Initializes a the object with the browse operation state information.
            </summary>
            <param name="branchPath">The item id of branch used in the browse operation.</param>
            <param name="enumerator">The enumerator used for the browse operation.</param>
            <param name="fetchingItems">Whether the enumerator is return branches or items.</param>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition.BranchPath">
            <summary>
            The item id of the branch being browsed.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition.Enumerator">
            <summary>
            The enumerator that was in use when the browse halted.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition.FetchingItems">
            <summary>
            Whether the browse halted while fetching items.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.BrowsePosition.Dispose">
            <summary>
            Releases any unmanaged resources held by the object.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback">
            <summary>
             A class that implements the HDA data callback interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.#ctor">
            <summary>
            Initializes the object with the containing subscription object.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.CallbackExceptionEvent">
            <summary>
            Fired when an exception occurs during callback processing.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.CreateRequest(System.Object,System.Delegate)">
            <summary>
            Creates a new request object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.CancelRequest(Technosoftware.DaAeHdaClient.Com.Hda.Request,Technosoftware.DaAeHdaClient.Hda.TsCHdaCancelCompleteEventHandler)">
            <summary>
            Cancels an existing request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnDataChange(System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Hda.OPCHDA_ITEM[],System.Int32[])">
            <summary>
            Called when new data arrives for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnReadComplete(System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Hda.OPCHDA_ITEM[],System.Int32[])">
            <summary>
            Called when an asynchronous read request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnReadModifiedComplete(System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Hda.OPCHDA_MODIFIEDITEM[],System.Int32[])">
            <summary>
            Called when an asynchronous read modified request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnReadAttributeComplete(System.Int32,System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Hda.OPCHDA_ATTRIBUTE[],System.Int32[])">
            <summary>
            Called when an asynchronous read attributes request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnReadAnnotations(System.Int32,System.Int32,System.Int32,Technosoftware.OpcRcw.Hda.OPCHDA_ANNOTATION[],System.Int32[])">
            <summary>
            Called when an asynchronous read annotations request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnInsertAnnotations(System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Called when an asynchronous insert annotations request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnPlayback(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32[])">
            <summary>
            Called when a batch of data from playback request arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnUpdateComplete(System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Called when an asynchronous update request completes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.OnCancelComplete(System.Int32)">
            <summary>
            Called when an asynchronous request was cancelled successfully.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.DataCallback.HandleException(System.Int32,System.Exception)">
            <summary>
            Fires an event indicating an exception occurred during callback processing.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.Interop">
            <summary>
            Contains state information for a single asynchronous Technosoftware.DaAeHdaClient.Com.Hda.Interop.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.Convert(Technosoftware.DaAeHdaClient.Com.FILETIME)">
            <summary>
            Converts a standard FILETIME to an OpcRcw.Da.FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.Convert(Technosoftware.OpcRcw.Hda.OPCHDA_FILETIME)">
            <summary>
            Converts an OpcRcw.Da.FILETIME to a standard FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetFILETIME(System.Decimal)">
            <summary>
            Converts a decimal value to a OpcRcw.Hda.OPCHDA_TIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetFILETIMEs(System.DateTime[])">
            <summary>
            Returns an array of FILETIMEs.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetTime(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime)">
            <summary>
            Converts a Technosoftware.DaAeHdaClient.Time object to a Technosoftware.DaAeHdaClient.Com.Hda.OPCHDA_TIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetItemValueCollections(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCHDA_ITEM structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetItemValueCollection(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ITEM structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetItemValueCollection(Technosoftware.OpcRcw.Hda.OPCHDA_ITEM,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ITEM structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetModifiedValueCollections(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCHDA_MODIFIEDITEM structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetModifiedValueCollection(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_MODIFIEDITEM structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetModifiedValueCollection(Technosoftware.OpcRcw.Hda.OPCHDA_MODIFIEDITEM,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_MODIFIEDITEM structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAttributeValueCollections(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCHDA_ATTRIBUTE structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAttributeValueCollection(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ATTRIBUTE structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAttributeValueCollection(Technosoftware.OpcRcw.Hda.OPCHDA_ATTRIBUTE,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ATTRIBUTE structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAnnotationValueCollections(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and deallocates an array of OPCHDA_ANNOTATION structures.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAnnotationValueCollection(System.IntPtr,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ANNOTATION structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Interop.GetAnnotationValueCollection(Technosoftware.OpcRcw.Hda.OPCHDA_ANNOTATION,System.Boolean)">
            <summary>
            Unmarshals and deallocates an OPCHDA_ANNOTATION structure.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.Request">
            <summary>
            An object that mainatains the state of asynchronous requests.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Request.RequestID">
            <summary>
            The unique id assigned to the request when it was created.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Request.CancelID">
            <summary>
            The unqiue id assigned by the server when it was created.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Hda.Request.CancelCompleteEvent">
            <summary>
            Fired when the server acknowledges that a request was cancelled.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.#ctor(System.Object,System.Delegate,System.Int32)">
            <summary>
            Initializes the object with all required information.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.Update(System.Int32,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Updates the request with the initial results.  
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(System.Object)">
            <summary>
            Invokes the callback for the request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.OnCancelComplete">
            <summary>
            Called when the server acknowledges that a request was cancelled. 
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Request.Handle">
            <summary>
            An unique identifier, assigned by the client, for the request.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Request.StartTime">
            <summary>
            The actual start time used by a server while processing a request.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Hda.Request.EndTime">
            <summary>
            The actual end time used by a server while processing a request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(Technosoftware.DaAeHdaClient.Hda.TsCHdaDataUpdateEventHandler,System.Object)">
            <summary>
            Invokes callback for a data change update.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(Technosoftware.DaAeHdaClient.Hda.TsCHdaReadValuesCompleteEventHandler,System.Object)">
            <summary>
            Invokes callback for a read request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(Technosoftware.DaAeHdaClient.Hda.TsCHdaReadAttributesCompleteEventHandler,System.Object)">
            <summary>
            Invokes callback for a read attributes request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(Technosoftware.DaAeHdaClient.Hda.TsCHdaReadAnnotationsCompleteEventHandler,System.Object)">
            <summary>
            Invokes callback for a read annotations request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.InvokeCallback(Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,System.Object)">
            <summary>
            Invokes callback for a read annotations request.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Request.UpdateResults(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Updates the result objects with locally cached information.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.Result">
            <summary>
            Defines all well known COM HDA HRESULT codes.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_MAXEXCEEDED">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_NODATA">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_MOREDATA">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_INVALIDAGGREGATE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_CURRENTVALUE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_EXTRADATA">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.W_NOFILTER">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_UNKNOWNATTRID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_NOT_AVAIL">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_INVALIDDATATYPE">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_DATAEXISTS">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_INVALIDATTRID">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.E_NODATAEXISTS">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_INSERTED">
            <remarks/>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Result.S_REPLACED">
            <remarks/>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Hda.Server">
            <summary>
            An in-process wrapper for a remote OPC COM-HDA server (thread-safe).
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.#ctor(Technosoftware.DaAeHdaClient.OpcUrl,System.Object)">
            <summary>
            Initializes the object with the specifed COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetServerStatus">
            <summary>
            Returns the current server status.
            </summary>
            <returns>The current server status.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetAttributes">
            <summary>
            Returns the item attributes supported by the server.
            </summary>
            <returns>The a set of item attributes and their descriptions.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetAggregates">
            <summary>
            Returns the aggregates supported by the server.
            </summary>
            <returns>The a set of aggregates and their descriptions.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CreateBrowser(Technosoftware.DaAeHdaClient.Hda.TsCHdaBrowseFilter[],Technosoftware.DaAeHdaClient.OpcResult[]@)">
            <summary>
            Creates a object used to browse the server address space.
            </summary>
            <param name="filters">The set of attribute filters to use when browsing.</param>
            <param name="results">A result code for each individual filter.</param>
            <returns>A browser object that must be released by calling Dispose().</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CreateItems(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Creates a set of items.
            </summary>
            <param name="items">The identifiers for the items to create.</param>
            <returns>The results for each item containing the server handle and result code.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReleaseItems(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Releases a set of previously created items.
            </summary>
            <param name="items">The server handles for the items to release.</param>
            <returns>The results for each item containing the result code.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ValidateItems(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Validates a set of items.
            </summary>
            <param name="items">The identifiers for the items to validate.</param>
            <returns>The results for each item containing the result code.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadRaw(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Int32,System.Boolean,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Reads raw (unprocessed) data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="maxValues">The number of values to be read for each item.</param>
            <param name="includeBounds">Whether the bounding item values should be returned.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <returns>A set of values, qualities and timestamps within the requested time range for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadRaw(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Int32,System.Boolean,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadValuesCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read raw data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="maxValues">The number of values to be read for each item.</param>
            <param name="includeBounds">Whether the bounding item values should be returned.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.AdviseRaw(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Decimal,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaDataUpdateEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Requests that the server periodically send notifications when new data becomes available for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="updateInterval">The frequency, in seconds, that the server should check for new data.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.PlaybackRaw(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Int32,System.Decimal,System.Decimal,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaDataUpdateEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Begins the playback raw data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="maxValues">The number of values to be read for each item.</param>      
            <param name="updateInterval">The frequency, in seconds, that the server send data.</param>
            <param name="playbackDuration">The duration, in seconds, of the timespan returned with each update.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadProcessed(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Decimal,Technosoftware.DaAeHdaClient.Hda.TsCHdaItem[])">
            <summary>
            Reads processed data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="resampleInterval">The interval between returned values.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <returns>A set of values, qualities and timestamps within the requested time range for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadProcessed(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Decimal,Technosoftware.DaAeHdaClient.Hda.TsCHdaItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadValuesCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read processed data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="resampleInterval">The interval between returned values.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.AdviseProcessed(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Decimal,System.Int32,Technosoftware.DaAeHdaClient.Hda.TsCHdaItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaDataUpdateEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Requests that the server periodically send notifications when new data becomes available for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="resampleInterval">The interval between returned values.</param>
            <param name="numberOfIntervals">The number of resample intervals that the server should return in each callback.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.PlaybackProcessed(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Decimal,System.Int32,System.Decimal,Technosoftware.DaAeHdaClient.Hda.TsCHdaItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaDataUpdateEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Begins the playback of processed data from the historian database for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="resampleInterval">The interval between returned values.</param>
            <param name="numberOfIntervals">The number of resample intervals that the server should return in each callback.</param>
            <param name="updateInterval">The frequency, in seconds, that the server send data.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAtTime(System.DateTime[],Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Reads data from the historian database for a set of items at specific times.
            </summary>
            <param name="timestamps">The set of timestamps to use when reading items values.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <returns>A set of values, qualities and timestamps within the requested time range for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAtTime(System.DateTime[],Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadValuesCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read item values at specific times.
            </summary>
            <param name="timestamps">The set of timestamps to use when reading items values.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadModified(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Int32,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Reads item values that have been deleted or replaced.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="maxValues">The number of values to be read for each item.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <returns>A set of values, qualities and timestamps within the requested time range for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadModified(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,System.Int32,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadValuesCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read item values that have been deleted or replaced.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="maxValues">The number of values to be read for each item.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAttributes(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem,System.Int32[])">
            <summary>
            Reads the current or historical values for the attributes of an item.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="item">The item to read (must include the server handle).</param>
            <param name="attributeIDs">The attributes to read.</param>
            <returns>A set of attribute values for each requested attribute.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAttributes(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem,System.Int32[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadAttributesCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read the attributes of an item.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="item">The item to read (must include the server handle).</param>
            <param name="attributeIDs">The attributes to read.</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the attribute ids.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAnnotations(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Reads any annotations for an item within the a time interval.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <returns>A set of annotations within the requested time range for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.ReadAnnotations(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaReadAnnotationsCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to read the annotations for a set of items.
            </summary>
            <param name="startTime">The beginning of the history period to read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="items">The set of items to read (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.InsertAnnotations(Technosoftware.DaAeHdaClient.Hda.TsCHdaAnnotationValueCollection[])">
            <summary>
            Inserts annotations for one or more items.
            </summary>
            <param name="items">A list of annotations to add for each item (must include the server handle).</param>
            <returns>The results of the insert operation for each annotation set.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.InsertAnnotations(Technosoftware.DaAeHdaClient.Hda.TsCHdaAnnotationValueCollection[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to inserts annotations for one or more items.
            </summary>
            <param name="items">A list of annotations to add for each item (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Insert(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemValueCollection[],System.Boolean)">
            <summary>
            Inserts the values into the history database for one or more items. 
            </summary>
            <param name="items">The set of values to insert.</param>
            <param name="replace">Whether existing values should be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Insert(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemValueCollection[],System.Boolean,System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to inserts values for one or more items.
            </summary>
            <param name="items">The set of values to insert.</param>
            <param name="replace">Whether existing values should be replaced.</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Replace(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemValueCollection[])">
            <summary>
            Replace the values into the history database for one or more items. 
            </summary>
            <param name="items">The set of values to replace.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Replace(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemValueCollection[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to replace values for one or more items.
            </summary>
            <param name="items">The set of values to replace.</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Delete(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Deletes the values with the specified time domain for one or more items.
            </summary>
            <param name="startTime">The beginning of the history period to delete.</param>
            <param name="endTime">The end of the history period to be delete.</param>
            <param name="items">The set of items to delete (must include the server handle).</param>
            <returns>The results of the delete operation for each item.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Delete(Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.Hda.TsCHdaTime,Technosoftware.DaAeHdaClient.OpcItem[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to delete values for one or more items.
            </summary>
            <param name="startTime">The beginning of the history period to delete.</param>
            <param name="endTime">The end of the history period to be delete.</param>
            <param name="items">The set of items to delete (must include the server handle).</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.DeleteAtTime(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemTimeCollection[])">
            <summary>
            Deletes the values at the specified times for one or more items. 
            </summary>
            <param name="items">The set of timestamps to delete for one or more items.</param>
            <returns>The results of the operation for each timestamp.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.DeleteAtTime(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemTimeCollection[],System.Object,Technosoftware.DaAeHdaClient.Hda.TsCHdaUpdateCompleteEventHandler,Technosoftware.DaAeHdaClient.IOpcRequest@)">
            <summary>
            Sends an asynchronous request to delete values for one or more items at a specified times.
            </summary>
            <param name="items">The set of timestamps to delete for one or more items.</param>
            <param name="requestHandle">An identifier for the request assigned by the caller.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
            <param name="request">An object that contains the state of the request (used to cancel the request).</param>
            <returns>A set of results containing any errors encountered when the server validated the items.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CancelRequest(Technosoftware.DaAeHdaClient.IOpcRequest)">
            <summary>
            Cancels an asynchronous request.
            </summary>
            <param name="request">The state object for the request to cancel.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CancelRequest(Technosoftware.DaAeHdaClient.IOpcRequest,Technosoftware.DaAeHdaClient.Hda.TsCHdaCancelCompleteEventHandler)">
            <summary>
            Cancels an asynchronous request.
            </summary>
            <param name="request">The state object for the request to cancel.</param>
            <param name="callback">A delegate used to receive notifications when the request completes.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Advise">
            <summary>
            Establishes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.Unadvise">
            <summary>
            Closes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CreateHandle">
            <summary>
            Creates a unique handle for an item.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetInvalidHandle">
            <summary>
            Finds an invalid server handle.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetCount(System.Collections.ICollection[])">
            <summary>
            Gets the total count for multiple collections.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.CreateResultCollections(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Initializes a set of result collections from a set of item ids.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetServerHandles(Technosoftware.DaAeHdaClient.OpcItem[])">
            <summary>
            Returns an array of item server handles.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetAggregateIDs(Technosoftware.DaAeHdaClient.Hda.TsCHdaItem[])">
            <summary>
            Returns an array of item aggregate ids.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.UpdateResult(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.OpcItem,System.Int32)">
            <summary>
            Updates the result with locally cached item information.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.UpdateActualTimes(Technosoftware.DaAeHdaClient.Hda.ITsCHdaActualTime[],Technosoftware.OpcRcw.Hda.OPCHDA_TIME,Technosoftware.OpcRcw.Hda.OPCHDA_TIME)">
            <summary>
            Adds the actual start/end times to a result collection. 
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.UpdateResults(Technosoftware.DaAeHdaClient.OpcItem,Technosoftware.DaAeHdaClient.Hda.TsCHdaAttributeValueCollection[],System.IntPtr@)">
            <summary>
            Updates the attribute value objects before returing them to the client.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.UpdateResults(Technosoftware.DaAeHdaClient.OpcItem[],Technosoftware.DaAeHdaClient.OpcItem[],System.IntPtr@)">
            <summary>
            Updates the annotation value objects before returing them to the client.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.UpdateResults(System.Collections.ICollection[],Technosoftware.DaAeHdaClient.Hda.TsCHdaResultCollection[],System.Int32,System.IntPtr@)">
            <summary>
            Unmarshals the errors array and updates the result objects.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.MarshalValues(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemValueCollection[],System.Int32[]@,System.Object[]@,System.Int32[]@,System.DateTime[]@)">
            <summary>
            Flattens a set of item value collections into an set of single arrays.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.MarshalTimestamps(Technosoftware.DaAeHdaClient.Hda.TsCHdaItemTimeCollection[],System.Int32[]@,System.DateTime[]@)">
            <summary>
            Flattens a set of item time collections into an set of single arrays.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.MarshalAnnotatations(Technosoftware.DaAeHdaClient.Hda.TsCHdaAnnotationValueCollection[],System.Int32[]@,Technosoftware.OpcRcw.Hda.OPCHDA_FILETIME[]@,Technosoftware.OpcRcw.Hda.OPCHDA_ANNOTATION[]@)">
            <summary>
            Marshals a set of annotation collections into an set of arrays.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Hda.Server.GetIdentifiedResults(Technosoftware.DaAeHdaClient.Hda.TsCHdaResultCollection[])">
            <summary>
            Collapses a set of result collections into a single result code.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Hda.Server.lock_">
            <summary>
            The synchronization object for subscription access
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Interop">
            <summary>
            Exposes WIN32 and COM API functions.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.EnumComputers">
            <summary>
            Enumerates computers on the local network.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetSystemMessage(System.Int32)">
            <summary>
            Retrieves the system message text for the specified error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetComputerName">
            <summary>
            Retrieves the name of the local computer.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CoInitializeEx(System.IntPtr,Technosoftware.DaAeHdaClient.Com.Interop.COINIT)">
            <returns>If function succeeds, it returns 0(S_OK). Otherwise, it returns an error code.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CoUnInitialize">
            <returns>If function succeeds, it returns 0(S_OK). Otherwise, it returns an error code.</returns>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Interop.ServerInfo">
            <summary>
            A class used to allocate and deallocate the elements of a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.ServerInfo.Allocate(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Allocates a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.ServerInfo.Deallocate">
            <summary>
            Deallocated memory allocated when the COSERVERINFO structure was created.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.Initialize(System.UInt32)">
            <summary>
            Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required. Before thread exit UnInitialize() must be called.
            </summary>
            <param name="coInit">The chosen threading model. Must be used for all threads.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.UnInitialize">
            <summary>
            Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.InitializeSecurity(System.UInt32)">
            <summary>
            Initializes COM security.
            </summary>
            <param name="authenticationLevel">The default authentication level for the process. Both servers and clients use this parameter when they call CoInitializeSecurity. With the Windows Update KB5004442 a higher authentication level of Integrity must be used.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CreateInstance(System.Guid,System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Creates an instance of a COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CreateInstanceWithLicenseKey(System.Guid,System.String,System.Net.NetworkCredential,System.String)">
            <summary>
            Creates an instance of a COM server using the specified license key.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetInt32s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetInt32s(System.Int32[])">
            <summary>
            Allocates and marshals an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetInt16s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetInt16s(System.Int16[])">
            <summary>
            Allocates and marshals an array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetUnicodeStrings(System.String[])">
            <summary>
            Marshals an array of strings into a unmanaged memory buffer
            </summary>
            <param name="values">The array of strings to marshal</param>
            <returns>The pointer to the unmanaged memory buffer</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetUnicodeStrings(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of unicode strings.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Interop.PreserveUtc">
            <summary>
            This flag suppresses the conversion to local time done during marshalling.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetFILETIME(System.DateTime)">
            <summary>
            Marshals a DateTime as a WIN32 FILETIME.
            </summary>
            <param name="datetime">The DateTime object to marshal</param>
            <returns>The WIN32 FILETIME</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetFILETIME(System.IntPtr)">
            <summary>
            Unmarshals a WIN32 FILETIME from a pointer.
            </summary>
            <param name="pFiletime">A pointer to a FILETIME structure.</param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetFILETIME(Technosoftware.DaAeHdaClient.Com.FILETIME)">
            <summary>
            Unmarshals a WIN32 FILETIME.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetFILETIMEs(System.DateTime[])">
            <summary>
            Marshals an array of DateTimes into an unmanaged array of FILETIMEs
            </summary>
            <param name="datetimes">The array of DateTimes to marshal</param>
            <returns>The IntPtr array of FILETIMEs</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetFILETIMEs(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 FILETIMEs as DateTimes.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Interop.GUID">
            <summary>
            WIN32 GUID struct declaration.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetGUIDs(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 GUIDs as Guid.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Interop.VARIANT_SIZE">
            <summary>
            The size, in bytes, of a VARIANT structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.VariantClear(System.IntPtr)">
            <summary>
            Frees all memory referenced by a VARIANT stored in unmanaged memory.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetVARIANT(System.Object)">
            <summary>
            Converts an object into a value that can be marshalled to a VARIANT.
            </summary>
            <param name="source">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetVARIANTs(System.Object[],System.Boolean)">
            <summary>
            Marshals an array objects into an unmanaged array of VARIANTs.
            </summary>
            <param name="values">An array of the objects to be marshalled</param>
            <param name="preprocess">Whether the objects should have troublesome types removed before marhalling.</param>
            <returns>An pointer to the array in unmanaged memory</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetVARIANTs(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of VARIANTs as objects.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Interop.LOCALE_SYSTEM_DEFAULT">
            <summary>
            The constant used to selected the default locale.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetLocale(System.Int32)">
            <summary>
            Converts a LCID to a Locale string.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetLocale(System.String)">
            <summary>
            Converts a Locale string to a LCID.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetType(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Converts the VARTYPE to a system type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetType(System.Type)">
            <summary>
            Converts the system type to a VARTYPE.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetResultID(System.Int32)">
            <summary>
            Converts the HRESULT to a system type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.GetResultID(Technosoftware.DaAeHdaClient.OpcResult)">
            <summary>
            Converts a result id to an HRESULT.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CreateException(System.String,System.Exception)">
            <summary>
            Returns an exception after extracting HRESULT from the exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.CreateException(System.String,System.Int32)">
            <summary>
            Returns an exception after extracting HRESULT from the exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Interop.ReleaseServer(System.Object)">
            <summary>
            Releases the server if it is a true COM server.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.OpcDiscovery">
            <summary>Provides methods for discover (search) of OPC Servers.</summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.Finalize">
            <summary>
            The finalizer implementation.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.GetHostNames">
            <summary>
            Returns a list of host names which could contain OPC servers.
            </summary>
            <returns>List of available network host names.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.GetServers(Technosoftware.DaAeHdaClient.OpcSpecification)">
            <summary>
            Returns a list of servers that support the specified specification.
            </summary>
            <param name="specification">Unique identifier for one OPC specification.</param>
            <returns>Returns a list of found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.GetServers(Technosoftware.DaAeHdaClient.OpcSpecification,System.String)">
            <summary>
            Returns a list of servers that support the specified specification.
            </summary>
            <param name="specification">Unique identifier for one OPC specification.</param>
            <param name="discoveryServerUrl">The URL of the discovery server to be used.</param>
            <returns>Returns a list of found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.GetServers(Technosoftware.DaAeHdaClient.OpcSpecification,System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Returns a list of servers that support the specified specification.
            </summary>
            <param name="specification">Unique identifier for one OPC specification.</param>
            <param name="discoveryServerUrl">The URL of the discovery server to be used.</param>
            <param name="identity">The user identity to use when discovering the servers.</param>
            <returns>Returns a list of found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.OpcDiscovery.GetServer(Technosoftware.DaAeHdaClient.OpcUrl)">
            <summary>
            Creates a server object for the specified URL.
            </summary>
            <param name="url">The OpcUrl of the OPC server.</param>
            <returns>The OpcServer object.</returns>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods">
            <summary>
            Exposes WIN32 and COM API functions.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.EnumComputers">
            <summary>
            Enumerates computers on the local network.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.LOCALE_SYSTEM_DEFAULT">
            <summary>
            The WIN32 system default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.LOCALE_USER_DEFAULT">
            <summary>
            The WIN32 user default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.FILETIME_BaseTime">
            <summary>
            The base for the WIN32 FILETIME structure.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GUID">
            <summary>
            WIN32 GUID struct declaration.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.VARIANT_SIZE">
            <summary>
            The size, in bytes, of a VARIANT structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.VariantInit(System.IntPtr)">
            <summary>
            Intializes a pointer to a VARIANT.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.VariantClear(System.IntPtr)">
            <summary>
            Frees all memory referenced by a VARIANT stored in unmanaged memory.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.ServerInfo">
            <summary>
            A class used to allocate and deallocate the elements of a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.ServerInfo.Allocate(System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Allocates a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.ServerInfo.Deallocate">
            <summary>
            Deallocated memory allocated when the COSERVERINFO structure was created.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.InitializeSecurity">
            <summary>
            Initializes COM security.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.IsLocalHost(System.String)">
            <summary>
            Determines if the host is the local host.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.Match(System.String,System.String,System.Boolean)">
            <summary>
            Tests if the specified string matches the specified pattern.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetStatusCodes(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of HRESULTs.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetInt32s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetUInt32s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetInt32s(System.Int32[])">
            <summary>
            Allocates and marshals an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetInt16s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetInt16s(System.Int16[])">
            <summary>
            Allocates and marshals an array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetUnicodeStrings(System.String[])">
            <summary>
            Marshals an array of strings into a unmanaged memory buffer
            </summary>
            <param name="values">The array of strings to marshal</param>
            <returns>The pointer to the unmanaged memory buffer</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetUnicodeStrings(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of unicode strings.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetFILETIME(System.DateTime)">
            <summary>
            Marshals a DateTime as a WIN32 FILETIME.
            </summary>
            <param name="datetime">The DateTime object to marshal</param>
            <returns>The WIN32 FILETIME</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetFILETIMEs(System.IntPtr@,System.Int32)">
            <summary>
            Unmarshals an array of FILETIMEs
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetDateTime(System.IntPtr)">
            <summary>
            Unmarshals a WIN32 FILETIME from a pointer.
            </summary>
            <param name="pFiletime">A pointer to a FILETIME structure.</param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetDateTime(System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>
            Unmarshals a WIN32 FILETIME.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetFILETIMEs(System.DateTime[])">
            <summary>
            Marshals an array of DateTimes into an unmanaged array of FILETIMEs
            </summary>
            <param name="datetimes">The array of DateTimes to marshal</param>
            <returns>The IntPtr array of FILETIMEs</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetDateTimes(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 FILETIMEs as DateTimes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetGUIDs(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 GUIDs as Guid.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetLocale(System.Int32)">
            <summary>
            Converts a LCID to a Locale string.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetLocale(System.String)">
            <summary>
            Converts a Locale string to a LCID.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetSystemType(System.Int16)">
            <summary>
            Converts the VARTYPE to a SystemType
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetVarType(System.Object)">
            <summary>
            Returns the VARTYPE for the value.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetVarType(System.Type)">
            <summary>
            Converts the system type to a VARTYPE.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.IsValidComType(System.Object)">
            <summary>
            Returns true is the object is a valid COM type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetErrorText(System.Type,System.Int32)">
            <summary>
            Returns the symbolic name for the specified error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetErrorCode(System.Exception,System.Int32)">
            <summary>
            Gets the error code for the exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="defaultCode">The default code.</param>
            <returns>The error code</returns>
            <remarks>This method ignores the exception but makes it possible to keep track of ignored exceptions.</remarks>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.ReleaseServer(System.Object)">
            <summary>
            Releases the server if it is a true COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.GetSystemMessage(System.Int32,System.Int32)">
            <summary>
            Retrieves the system message text for the specified error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.CreateComException(System.Exception,System.Int32)">
            <summary>
            Converts an exception to an exception that returns a COM error code.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.CreateComException(System.String,System.Int32)">
            <summary>
            Creates a COM exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.CreateComException(System.Int32)">
            <summary>
            Converts an exception to an exception that returns a COM error code.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.IsRpcError(System.Exception)">
            <summary>
            Checks if the error is an RPC error.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.IsUnknownError(System.Exception,System.Int32[])">
            <summary>
            Checks if the error for the exception is one of the recognized errors.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.CompareLocales(System.Int32,System.String,System.Boolean)">
            <summary>
            Compares a string locale to a WIN32 localeId
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.SafeNativeMethods.TraceComError(System.Exception,System.String,System.Object[])">
            <summary>
            Reports an unexpected exception during a COM operation. 
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Server">
            <summary>
            An in-process wrapper for a remote OPC COM server (not thread safe).
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.server_">
            <summary>
            The COM server wrapped by the object.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.url_">
            <summary>
            The URL containing host, prog id and clsid information for The remote server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.connection_">
            <summary>
            A connect point with the COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.callback_">
            <summary>
            The internal object that implements the IOPCShutdown interface.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.lock_">
            <summary>
            The synchronization object for server access
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.#ctor(Technosoftware.DaAeHdaClient.OpcUrl,System.Object)">
            <summary>
            Initializes the object with the specifed COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Finalize">
            <summary>
            The finalizer.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Dispose">
            <summary>
            Releases unmanaged resources held by the object.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true managed and unmanaged resources can be disposed. If false only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Initialize(Technosoftware.DaAeHdaClient.OpcUrl,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Connects to the server with the specified URL and credentials.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Uninitialize">
            <summary>
            Releases The remote server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.SetClientName(System.String)">
            <summary>
            Allows the client to optionally register a client name with the server. This is included primarily for debugging purposes. The recommended behavior is that the client set his Node name and EXE name here.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.EnableDCOMCallCancellation(System.TimeSpan)">
            <summary>
            Allows cancellation control of DCOM callbacks to the server - by default DCOM calls will wait the default DCOM timeout
            to fail - this method allows for tigher control of the timeout to wait. Note that DOCM calls can only be controlled
            on a COM Single Threaded Apartment thread - use [STAThread] attribute on your application entry point or use Thread SetThreadApartment
            before the thread the server is operating on is created to STA.
            </summary>
            <param name="timeout">The DCOM call timeout - uses the default timeout if not specified</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.DisableDCOMCallCancellation">
            <summary>
            Disables cancellation control of DCOM calls to the server
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Server.ServerShutdownEvent">
            <summary>
            An event to receive server shutdown notifications.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.GetLocale">
            <summary>
            The locale used in any error messages or results returned to the client.
            </summary>
            <returns>The locale name in the format "[languagecode]-[country/regioncode]".</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.SetLocale(System.String)">
            <summary>
            Sets the locale used in any error messages or results returned to the client.
            </summary>
            <param name="locale">The locale name in the format "[languagecode]-[country/regioncode]".</param>
            <returns>A locale that the server supports and is the best match for the requested locale.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.GetSupportedLocales">
            <summary>
            Returns the locales supported by the server
            </summary>
            <remarks>The first element in the array must be the default locale for the server.</remarks>
            <returns>An array of locales with the format "[languagecode]-[country/regioncode]".</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.GetErrorText(System.String,Technosoftware.DaAeHdaClient.OpcResult)">
            <summary>
            Returns the localized text for the specified result code.
            </summary>
            <param name="locale">The locale name in the format "[languagecode]-[country/regioncode]".</param>
            <param name="resultId">The result code identifier.</param>
            <returns>A message localized for the best match for the requested locale.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.ReleaseServer">
            <summary>
            Releases all references to the server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.SupportsInterface``1">
            <summary>
            Checks if the server supports the specified interface.
            </summary>
            <typeparam name="T">The interface to check.</typeparam>
            <returns>True if the server supports the interface.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.BeginComCall``1(System.String,System.Boolean)">
            <summary>
            Must be called before any COM call.
            </summary>
            <typeparam name="T">The interface to used when making the call.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="isRequiredInterface">if set to <c>true</c> interface is an required interface and and exception is thrown on error.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.BeginComCall``1(System.Object,System.String,System.Boolean)">
            <summary>
            Must be called before any COM call.
            </summary>
            <typeparam name="T">The interface to used when making the call.</typeparam>
            <param name="parent">Parent COM object</param>
            <param name="methodName">Name of the method.</param>
            <param name="isRequiredInterface">if set to <c>true</c> interface is an required interface and and exception is thrown on error.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.ComCallError(System.String,System.Exception)">
            <summary>
            Must called if a COM call returns an unexpected exception.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="e">The exception.</param>
            <remarks>Note that some COM calls are expected to return errors.</remarks>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.EndComCall(System.String)">
            <summary>
            Must be called in the finally block after making a COM call.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Advise">
            <summary>
            Establishes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Unadvise">
            <summary>
            Closes a connection point callback with the COM server.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Server.Callback">
            <summary>
            A class that implements the IOPCShutdown interface.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Callback.#ctor(Technosoftware.DaAeHdaClient.Com.Server)">
            <summary>
            Initializes the object with the containing subscription object.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Server.Callback.ServerShutdown">
            <summary>
            An event to receive server shutdown notificiations.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Server.Callback.m_server">
            <summary>
            A table of item identifiers indexed by internal handle.
            </summary>
        </member>
        <member name="E:Technosoftware.DaAeHdaClient.Com.Server.Callback.m_serverShutdown">
            <summary>
            Raised when data changed callbacks arrive.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Server.Callback.ShutdownRequest(System.String)">
            <summary>
            Called when a shutdown event is received.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.ServerEnumerator">
            <summary>
            A unique identifier for the result of an operation of an item.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.Dispose">
            <summary>
            Frees all unmanaged resources
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.EnumerateHosts">
            <summary>
            Enumerates hosts that may be accessed for server discovery.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.GetAvailableServers(Technosoftware.DaAeHdaClient.OpcSpecification)">
            <summary>
            Returns a list of servers that support the specified interface specification.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.GetAvailableServers(Technosoftware.DaAeHdaClient.OpcSpecification,System.String,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Returns a list of servers that support the specified specification on the specified host.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.CLSIDFromProgID(System.String,System.String,Technosoftware.DaAeHdaClient.OpcConnectData)">
            <summary>
            Looks up the CLSID for the specified prog id on a remote host.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.m_server">
            <summary>
            The server enumerator COM server.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.m_host">
            <summary>
            The host where the servers are being enumerated.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.ProgID">
            <summary>
            The ProgID for the OPC Server Enumerator.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.CLSID">
            <summary>
            The CLSID for the OPC Server Enumerator.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.ReadClasses(Technosoftware.OpcRcw.Comn.IOPCEnumGUID)">
            <summary>
            Reads the guids from the enumerator.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.ServerEnumerator.CreateUrl(Technosoftware.DaAeHdaClient.OpcSpecification,System.Guid)">
            <summary>
            Reads the server details from the enumerator.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult">
            <summary>
            The result of DCOM watchdog
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult.None">
            <summary>
            Watchdog has not been set/there is no result
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult.Completed">
            <summary>
            The Set/Reset cycle was manually completed i.e. the DCOM call did not timeout
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult.TimedOut">
            <summary>
            No Reset call occurred with the timeout period thus the current DCOM call was automatically cancelled
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult.ManuallyCancelled">
            <summary>
            The current DCOM call was manually cancelled
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog">
            <summary>
            Watchdog mechanism to allow for cancellation of DCOM calls. Note that this mechanism will only work for a STA thread apartment - the thread on which
            the watchdog is Set and DCOM calls are made have to be the same thread and the thread apartment model has to be set to STA.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.LastWatchdogResult">
            <summary>
            The result of the last watchdog set/reset operation
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.WatchDogThreadID">
            <summary>
            The current native thread ID on which the watchdog has been enabled
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.IsEnabled">
            <summary>
            Indicates if the watchdog mechanism is active or not
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.IsSet">
            <summary>
            Indicates if the watchdog has been set and is busy waiting for a call completion Reset to be called or a timeout to occur.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.IsCancelled">
            <summary>
            Indicates if the watchdog was cancelled due to a timeout
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Timeout">
            <summary>
            The watchdog timeout timespan
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Enable">
            <summary>
            Enables the Watchdog mechanism. This can be called from any thread and does not have to be the DCOM call originator thread.
            Uses the default call timeout.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Enable(System.TimeSpan)">
            <summary>
            Enables the Watchdog mechanism. This can be called from any thread and does not have to be the DCOM call originator thread.
            </summary>
            <param name="timeout">The maximum time to wait for a DCOM call to succeed before it is cancelled. Note that DCOM will typically timeout
            between 1-2 minutes, depending on the OS</param>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Disable">
            <summary>
            Disables the watchdog mechanism and stops any call cancellations.
            </summary>
            <returns>True if enabled and now disabled, otherwise false</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Set">
            <summary>
            Sets the watchdog timer active on the current thread. If Reset is not called within the timeout period, any current thread DCOM call will be cancelled. The
            calling thread must be the originator of the DCOM call and must be an STA thread.
            </summary>
            <returns>True if the watchdog set succeeds or was already set for the current thread, else false if the watchdog is not enabled.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Update">
            <summary>
            Refreshes the watchdog activity timer to now, effectively resetting the time to wait.
            </summary>
            <returns>True if the watchdog time was updated, else False if the watchdog timer is not Enabled or Set</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Reset">
            <summary>
            Resets the watchdog timer for the current thread. This should be called after a DCOM call returns to indicate the call succeeded, and thus cancelling the
            watchdog timer.
            </summary>
            <returns>True if the watchdog timer was reset for the current thread, else False if the timer was not set for the thread of the watchdog is not enabled.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Cancel">
            <summary>
            Allows for manual cancellation of the current DCOM call
            </summary>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.Cancel(Technosoftware.DaAeHdaClient.Com.Utilities.DCOMWatchdogResult)">
            <summary>
            Cancels the current DCOM call if there is one active
            </summary>
            <param name="reason"></param>
            <returns>The reason for the cancellation</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.DCOMCallWatchdog.WatchdogTask">
            <summary>
            The Watchdog Task is a seperate thread that is activated when the Watchdog is enabled. It checks the time since the last Set was called and
            then cancels the current DCOM call automatically if Reset is not called within the timeout period.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Utilities.Interop">
            <summary>
            Exposes WIN32 and COM API functions.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.EnumComputers">
            <summary>
            Enumerates computers on the local network.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.LOCALE_SYSTEM_DEFAULT">
            <summary>
            The WIN32 system default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.LOCALE_USER_DEFAULT">
            <summary>
            The WIN32 user default locale.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.VARIANT_SIZE">
            <summary>
            The size, in bytes, of a VARIANT structure.
            </summary>
        </member>
        <member name="F:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.FILETIME_BaseTime">
            <summary>
            The base for the WIN32 FILETIME structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.VariantInit(System.IntPtr)">
            <summary>
            Intializes a pointer to a VARIANT.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.VariantClear(System.IntPtr)">
            <summary>
            Frees all memory referenced by a VARIANT stored in unmanaged memory.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GUID">
            <summary>
            WIN32 GUID struct declaration.
            </summary>
        </member>
        <member name="P:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.PreserveUtc">
            <summary>
            This flag suppresses the conversion to local time done during marshalling.
            </summary>
        </member>
        <member name="T:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.ServerInfo">
            <summary>
            A class used to allocate and deallocate the elements of a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.ServerInfo.Allocate(System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Allocates a COSERVERINFO structure.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.ServerInfo.Deallocate">
            <summary>
            Deallocated memory allocated when the COSERVERINFO structure was created.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.InitializeSecurity">
            <summary>
            Initializes COM security.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.IsLocalHost(System.String)">
            <summary>
            Determines if the host is the local host.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.CreateInstance(System.Guid,System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Creates an instance of a COM server using the specified license key.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.CreateInstance1(System.Guid,System.String,Technosoftware.DaAeHdaClient.OpcUserIdentity)">
            <summary>
            Creates an instance of a COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.Match(System.String,System.String,System.Boolean)">
            <summary>
            Tests if the specified string matches the specified pattern.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetStatusCodes(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of HRESULTs.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetInt32s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetUInt32s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetInt32s(System.Int32[])">
            <summary>
            Allocates and marshals an array of 32 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetInt16s(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetInt16s(System.Int16[])">
            <summary>
            Allocates and marshals an array of 16 bit integers.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetUnicodeStrings(System.String[])">
            <summary>
            Marshals an array of strings into a unmanaged memory buffer
            </summary>
            <param name="values">The array of strings to marshal</param>
            <returns>The pointer to the unmanaged memory buffer</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetUnicodeStrings(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals and frees a array of unicode strings.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetFILETIME(System.DateTime)">
            <summary>
            Marshals a DateTime as a WIN32 FILETIME.
            </summary>
            <param name="datetime">The DateTime object to marshal</param>
            <returns>The WIN32 FILETIME</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetDateTime(System.IntPtr)">
            <summary>
            Unmarshals a WIN32 FILETIME from a pointer.
            </summary>
            <param name="pFiletime">A pointer to a FILETIME structure.</param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetDateTime(Technosoftware.OpcRcw.Da.FILETIME)">
            <summary>
            Unmarshals a WIN32 FILETIME.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetFILETIMEs(System.DateTime[])">
            <summary>
            Marshals an array of DateTimes into an unmanaged array of FILETIMEs
            </summary>
            <param name="datetimes">The array of DateTimes to marshal</param>
            <returns>The IntPtr array of FILETIMEs</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetDateTimes(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 FILETIMEs as DateTimes.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetGUIDs(System.IntPtr@,System.Int32,System.Boolean)">
            <summary>
            Unmarshals an array of WIN32 GUIDs as Guid.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetVARIANT(System.Object)">
            <summary>
            Converts an object into a value that can be marshalled to a VARIANT.
            </summary>
            <param name="source">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetLocale(System.Int32)">
            <summary>
            Converts a LCID to a Locale string.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetLocale(System.String)">
            <summary>
            Converts a Locale string to a LCID.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetType(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Converts the VARTYPE to a system type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetType(System.Type)">
            <summary>
            Converts the system type to a VARTYPE.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetResultId(System.Int32)">
            <summary>
            Converts the HRESULT to a system type.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetResultID(Technosoftware.DaAeHdaClient.OpcResult)">
            <summary>
            Converts a result id to an HRESULT.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.CreateException(System.String,System.Exception)">
            <summary>
            Returns an exception after extracting HRESULT from the exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.CreateException(System.String,System.Int32)">
            <summary>
            Returns an exception after extracting HRESULT from the exception.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.ReleaseServer(System.Object)">
            <summary>
            Releases the server if it is a true COM server.
            </summary>
        </member>
        <member name="M:Technosoftware.DaAeHdaClient.Com.Utilities.Interop.GetSystemMessage(System.Int32,System.Int32)">
            <summary>
            Retrieves the system message text for the specified error.
            </summary>
        </member>
    </members>
</doc>
