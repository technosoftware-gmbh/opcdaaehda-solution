/*
 * Copyright (c) 2011-2023 Technosoftware GmbH. All rights reserved
 * Web: https://technosoftware.com 
 * 
 * The source code in this file is covered under a dual-license scenario:
 *   - Owner of a purchased license: SCLA 1.0
 *   - GPL V3: everybody else
 *
 * SCLA license terms accompanied with this source code.
 * See https://technosoftware.com/license/Source_Code_License_Agreement.pdf
 *
 * GNU General Public License as published by the Free Software Foundation;
 * version 3 of the License are accompanied with this source code.
 * See https://technosoftware.com/license/GPLv3License.txt
 *
 * This source code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 */

/*! \page starting Getting started

\addindex starting
\tableofcontents

<p>The getting started lessons provide sample code for the most common use cases.</p>
<ul>
  <li>Lesson 1: Distribution Contents</li>
  <li>Lesson 2: Development Steps</li>
  <li>Lesson 3: Development Process</li>
</ul>
<p>The following lists give an overview on the learning targets covered by each lesson.</p>
<h2>Lesson 1: Distribution Contents</h2>
<ul>
  <li>Understand the structure of the OPC DA/AE Server Solution C++ delivery</li>
</ul>
<h2>Lesson 2: Development Steps</h2>
<ul>
  <li>Short walk through of the required Development steps.</li>
</ul>
<h2>Lesson 3: Development Process</h2>
<ul>
  <li>Step-by-step description of the server development process</li>
</ul>
\section lession_1 Lesson 1: Distribution Contents
<p>List of components included in the OPC DA/AE Server Solution C++:</p>
<table cellspacing="0" width="100%">
  <tr>
    <th valign="top" align="left" width="15%">Directory
      </td>
    <th valign="top" align="left" width="75%">Description
      </td>
  </tr>
  <tr>
    <td valign="top" width="15%"></td>
    <td valign="top" width="96%">Main directory of the Base.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Win32</td>
    <td valign="top" width="96%">Contains 32bit binaries. The 32bit version of the OPC Core Components installer is also located here.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">src</td>
    <td valign="top" width="75%">Contains C++ source code of the generic server part. Normally you should not change anything in this code. <strong>Get in contact with us if you think a change is required.</strong></td>
  </tr>
  <tr>
    <td valign="top" width="15%">doc</td>
    <td valign="top" width="75%">Contains documentation files like Readme, Changelog and reference documentation as compiled html file.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">doc\\pdf</td>
    <td valign="top" width="75%">Contains specifications, brochures and license agreement.</td>
  </tr>
</table>
<p>The installation also copies the source code of the sample server to \\examples\\c++. This directory has the following structure:</p>
<table cellspacing="0" width="100%">
  <tr>
    <th valign="top" align="left" width="15%">Directory
      </td>
    <th valign="top" align="left" width="75%">Description
      </td>
  </tr>
  <tr>
    <td valign="top" width="15%">DaAeSampleServer</td>
    <td valign="top" width="96%">Main directory of the DA & AE sample server source code. It also includes the
		<ul>
			<li>OpcDaAeServer.vs2017.sln</li>
			<li>ClassicNodeManager.cpp</li>
			<li>ClassicNodeManager.h</li>
			<li>OpcDaAeServer.rc</li>
		</ul>
		These are the files you should normally only change
	</td>
  </tr>
  <tr>
    <td valign="top" width="15%">DaSampleServer</td>
    <td valign="top" width="96%">Main directory of the DA sample server source code. It also includes the
		<ul>
			<li>OpcDaServer.vs2017.sln</li>
			<li>ClassicNodeManager.cpp</li>
			<li>ClassicNodeManager.h</li>
			<li>OpcDaServer.rc</li>
		</ul>
		These are the files you should normally only change
	</td>
  </tr>
</table>
\section lession_2 Lesson 2: Development Steps
<p>Short walk through of the required Development steps:</p>
<table cellspacing="0" width="100%">
  <tr>
    <th valign="top" align="left" width="15%">Step
      </td>
    <th valign="top" align="left" width="75%">Description
      </td>
  </tr>
  <tr>
    <td valign="top" width="15%">Create a project</td>
    <td valign="top" width="96%">It is recommended to use one of the sample projects as a new application project.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Item Configuration</td>
    <td valign="top" width="75%">The items supported by the server can be defined in the code of the customization module.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Server registration</td>
    <td valign="top" width="75%">The sample projects registers the server when the project is compiled. You can also use the following commands:
		<ul>
			<li>To register the server use "OpcDaAeServer.exe -regserver".</li>
			<li>To register the server as service use "OpcDaAeServer.exe -service".</li>
			<li>To unregister the server use "OpcDaAeServer.exe -unregserver".</li>
		</ul>
	</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Debugging the Customization</td>
    <td valign="top" width="75%">To debug the server, start it in debug mode within Visual Studio. Since the customization module is a DLL, the generic server exe has actually to be started.<br/>
	The customization method OnGetDaServerDefinition() is called at startup.<br/>
	The initialization methods OnGetDaServerParameters() and OnCreateServerItems() are called when the first client connects. Normal server operation starts after these method calls are executed.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Deployment</td>
    <td valign="top" width="75%">See Chapter Deploying your application.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">DCOM Configuration</td>
    <td valign="top" width="75%">See Chapter Trouble Shooting.</td>
  </tr>
</table>
\section lession_3 Lesson 3: Development Process
<p>Following is a step-by-step description of the server development process:</p>
<table cellspacing="0" width="100%">
  <tr>
    <th valign="top" align="left" width="15%">Step
      </td>
    <th valign="top" align="left" width="75%">Description
      </td>
  </tr>
  <tr>
    <td valign="top" width="15%"></td>
    <td valign="top" width="96%"><strong>Create the Application Project from a Sample Application</strong></td>
  </tr>
  <tr>
    <td valign="top" width="15%">1.1</td>
    <td valign="top" width="75%">Copy the source code directory and rename the copy.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">1.2</td>
    <td valign="top" width="75%">Open the solution in Visual Studio and open the file ClassicNodeManager.cpp.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">1.3</td>
    <td valign="top" width="75%">Search the method OnGetDaServerDefinition and modify the registration definition.<br/>
	Each server needs a unique CLSID (DaServer.ClsidServer) and AppID (DaServer.ClsidApp). Use the Visual Studio Tool Create GUID and paste the created unique GUID into the code, replacing the existing GUID.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">1.4</td>
    <td valign="top" width="75%">Select Project - Properties - Debug - Start Action and change the Start External program application path OpcDaAeServer.exe in the project debug output directory.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">1.5</td>
    <td valign="top" width="75%">With C++ this also registers the server and the copied sample application is now accessible under the modified ProgID.</td>
  </tr>
  <tr>
    <td valign="top" width="15%"></td>
    <td valign="top" width="96%"><strong>Customize and Compile</strong></td>
  </tr>
  <tr>
    <td valign="top" width="15%">2.1</td>
    <td valign="top" width="75%">Edit the source file:<br/>
		<ul><li>ClassicNodeManager.cpp</li></ul>
	and add files with additional classes as required for the project specific device handling.<br/>
	Build the application project and correct all compile errors.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">2.2</td>
    <td valign="top" width="75%">Build the project.<br/>
	C++ copies the generic server OpcDaAeServer.exe into the project output directory and registers the server.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">2.3</td>
    <td valign="top" width="75%">Start the project in debug mode and test the device handling.<br/>
	Use one of the supplied test clients or your own client to connect to the already started OPC server.<br/><br/>
	The clients must use the OPC server ProgID as it is defined in the customization method OnGetDaServerDefinition() to connect to this server.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">2.4</td>
    <td valign="top" width="75%">Start an OPC client, connect to the server and check the item address space and the item values.</td>
  </tr>
  <tr>
    <td valign="top" width="15%"></td>
    <td valign="top" width="96%"><strong>Deployment</strong></td>
  </tr>
  <tr>
    <td valign="top" width="15%">3.1</td>
    <td valign="top" width="75%">Compile the Solution With Release configuration selected.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">3.2</td>
    <td valign="top" width="75%">Copy the files from the Release Output directory to target computer:
		<ul>
			<li>OpcDaAeServer.exe</li>
			<li>OPC Core Components Redistributable.msi and Setup.exe from the \\binaries\\redist\\OPCCoreComponentsRedistributable installation directory.</li>
		</ul>
	</td>
  </tr>
  <tr>
    <td valign="top" width="15%">3.3</td>
    <td valign="top" width="75%">Execute Setup.exe to install the common OPC interfaces and the server enumerator.<br/>
Register the OPC Server on the target computer by executing "OpcDaAeClassicServer -regserver" in the target directory.<br/>
If you want to install the OPC server as service issue the command "OpcDaAeClassicServer -service" in the target directory.</td>
  </tr>
</table>

\htmlonly
  Go to the <a href="serverdevelopment.html">next</a> section or return to the <a href="index.html">index</a>.
\endhtmlonly
  
  */ 